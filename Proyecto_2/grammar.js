/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,24],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,25],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,36],$Va=[1,37],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[5,18,39,40,50,55,57,58,62,69,70,71,94,95,96,97,98,111,112,113,114,115,116,117],$Vm=[1,57],$Vn=[1,60],$Vo=[1,58],$Vp=[1,59],$Vq=[1,71],$Vr=[42,69,106],$Vs=[1,80],$Vt=[8,42,66,68],$Vu=[8,35,36,39,42,68,72,73,74,75,76,77,78,79,80,81,82,83,84,85,107],$Vv=[1,85],$Vw=[1,89],$Vx=[1,87],$Vy=[1,88],$Vz=[1,93],$VA=[1,94],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[1,99],$VF=[8,42],$VG=[1,142],$VH=[1,128],$VI=[1,129],$VJ=[1,130],$VK=[1,131],$VL=[1,132],$VM=[1,133],$VN=[1,134],$VO=[1,135],$VP=[1,136],$VQ=[1,137],$VR=[1,138],$VS=[1,139],$VT=[1,140],$VU=[1,141],$VV=[8,35,36,39,42,68,72,73,78,79,80,81,82,83,84,85,107],$VW=[8,35,36,39,42,68,84,85,107],$VX=[1,193],$VY=[5,18,39,40,47,48,50,55,57,58,62,69,70,71,94,95,96,97,98,111,112,113,114,115,116,117],$VZ=[8,35,36,39,42,68,72,73,74,75,77,78,79,80,81,82,83,84,85,107],$V_=[8,35,36,39,42,68,78,79,80,81,82,83,84,85,107],$V$=[1,210],$V01=[1,219],$V11=[1,234],$V21=[1,243],$V31=[39,68],$V41=[39,54,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"DECLARACION":7,";":8,"INDECREMENTO":9,"ASIGNACION":10,"PRINT":11,"PRINTLN":12,"IF":13,"CICLOFOR":14,"SWITCH":15,"WHILE":16,"DO_WHILE":17,"DO_UNTIL":18,"DECLARACION_VECTOR":19,"MODIFICACION_VECTOR":20,"FUNCIONES_NATIVAS":21,"LLAMADAS":22,"FUNCIONES_VECTORES":23,"FIJOS":24,"CICLOS":25,"INSTRUCCIONES_METODO":26,"RETURN_SOLO":27,"INSTRUCCIONES_FUNCION":28,"RETURN_VALOR":29,"GLOBALES":30,"METODO":31,"FUNCION":32,"OPTERNARIO":33,"EXPRE":34,"?":35,":":36,"BLOQUE":37,"{":38,"}":39,"tif":40,"(":41,")":42,"ACCIONES_":43,"COMPLEMENTO_IF":44,"ELSE":45,"LISTA_ELIF":46,"telif":47,"telse":48,"ACCIONES_IF":49,"tswitch":50,"COMPLEMENTO_SWITCH":51,"LISTA_CASE":52,"DEFAULT_CASE":53,"tcase":54,"tbreak":55,"tdefault":56,"twhile":57,"tdo":58,"\r\n;\r\n\r\nDO_UNTIL":59,"\r\n":60,"tuntil":61,"tfor":62,"ACTUALIZACION_FOR":63,"TIPOS":64,"LISTA_ID":65,"=":66,"CASTEO":67,",":68,"id":69,"tprint":70,"tprintln":71,"+":72,"-":73,"*":74,"/":75,"^":76,"%":77,"<":78,">":79,"<=":80,">=":81,"==":82,"!=":83,"&&":84,"||":85,"!":86,"ACCESO_VECTOR":87,"F":88,"expreINT":89,"expreSTRING":90,"expreBOOL":91,"expreDOUBLE":92,"expreCHAR":93,"tint":94,"tdouble":95,"tstring":96,"tbool":97,"tchar":98,"++":99,"--":100,"LISTA_PARAMETROS":101,"tvoid":102,"treturn":103,"SENTENCIAS_TRANSFERENCIA":104,"tcontinue":105,"[":106,"]":107,"tnew":108,"LISTA_VALORES_1":109,"LISTA_VALORES_2":110,"ttolower":111,"ttoupper":112,"tround":113,"tlength":114,"ttypeof":115,"ttostring":116,"ttochararray":117,".":118,"tpush":119,"tpop":120,"RUN":121,"trun":122,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",18:"DO_UNTIL",35:"?",36:":",38:"{",39:"}",40:"tif",41:"(",42:")",47:"telif",48:"telse",49:"ACCIONES_IF",50:"tswitch",54:"tcase",55:"tbreak",56:"tdefault",57:"twhile",58:"tdo",59:"\r\n;\r\n\r\nDO_UNTIL",60:"\r\n",61:"tuntil",62:"tfor",66:"=",68:",",69:"id",70:"tprint",71:"tprintln",72:"+",73:"-",74:"*",75:"/",76:"^",77:"%",78:"<",79:">",80:"<=",81:">=",82:"==",83:"!=",84:"&&",85:"||",86:"!",89:"expreINT",90:"expreSTRING",91:"expreBOOL",92:"expreDOUBLE",93:"expreCHAR",94:"tint",95:"tdouble",96:"tstring",97:"tbool",98:"tchar",99:"++",100:"--",102:"tvoid",103:"treturn",105:"tcontinue",106:"[",107:"]",108:"tnew",111:"ttolower",112:"ttoupper",113:"tround",114:"tlength",115:"ttypeof",116:"ttostring",117:"ttochararray",118:".",119:"tpush",120:"tpop",122:"trun"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[24,2],[25,1],[25,1],[25,1],[25,1],[25,2],[25,2],[26,1],[26,1],[26,1],[28,1],[28,1],[28,1],[30,1],[30,1],[30,1],[33,5],[37,3],[13,5],[13,6],[44,1],[44,1],[44,2],[46,5],[46,6],[45,2],[43,1],[43,2],[15,7],[51,2],[51,1],[51,1],[52,6],[52,7],[53,5],[16,5],[17,23],[14,9],[14,9],[63,1],[63,1],[7,4],[7,4],[7,4],[7,2],[65,3],[65,1],[10,3],[10,3],[10,3],[11,4],[12,4],[34,3],[34,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,1],[34,1],[34,1],[34,1],[88,1],[88,1],[88,1],[88,1],[88,1],[67,4],[64,1],[64,1],[64,1],[64,1],[64,1],[9,2],[9,2],[32,7],[32,6],[31,7],[31,6],[31,6],[31,5],[101,4],[101,2],[29,3],[27,2],[104,1],[104,1],[19,10],[19,15],[19,8],[19,10],[109,3],[109,1],[110,5],[110,3],[87,4],[87,7],[20,6],[20,9],[21,4],[21,4],[21,4],[21,4],[21,4],[21,4],[21,4],[23,6],[23,5],[22,4],[22,3],[121,4],[121,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 48:
console.log("entro else")
break;
case 49:
console.log("Entro lista elif")
break;
case 50:
console.log("ENTRO ELIS Y ELSE")
break;
case 78:
console.log("PRINT " + $$[$0-1] );
break;
case 79:
console.log("PRINTLN " + $$[$0-1] );
break;
case 82:
 
                                var nuevo = new Nodo("EXPRE", contador++);
                                var nuevo1 = new Nodo("+", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-2]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA SUMA ");
                            
break;
case 83:
 
                                var nuevo = new Nodo("EXPRE", contador++);
                                var nuevo1 = new Nodo("-", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA RESTA ");
                            
break;
case 84:
 
                                var nuevo = new Nodo("EXPRE", contador++);
                                var nuevo1 = new Nodo("*", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA MULTIPLICACION ");
                            
break;
case 85:
 
                                var nuevo = new Nodo("EXPRE", contador++);
                                var nuevo1 = new Nodo("/", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA DIVISION ");
                            
break;
case 86:
 
                                var nuevo = new Nodo("EXPRE", contador++);
                                var nuevo1 = new Nodo("^", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA POTENCIA ");
                            
break;
case 87:
 
                                var nuevo = new Nodo("EXPRE", contador++);
                                var nuevo1 = new Nodo("%", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 98:
  console.log("se encontró un id");
                                this.$ = new Nodo("ID", contador++, $$[$0]); 
break;
case 101:
this.$ = $$[$0]; 
break;
case 102:
                      
                                this.$ = new Nodo("INT", contador++, $$[$0]); 
                                console.log("SE ENCONTRÓ UN INT ");
                    
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{1:[3]},{5:[1,41],6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},o($Vl,[2,3]),{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[1,54]},{65:55,69:$Vm,106:[1,56]},{41:[1,62],66:$Vn,99:$Vo,100:$Vp,106:[1,61],118:[1,63]},{41:[1,64]},{41:[1,65]},{41:[1,66]},{41:[1,67]},{41:[1,68]},{41:[1,69]},{37:70,38:$Vq},{41:[1,72]},{41:[1,73]},{41:[1,74]},{41:[1,75]},{41:[1,76]},{41:[1,77]},{41:[1,78]},o($Vr,[2,108]),o($Vr,[2,109]),o($Vr,[2,110]),o($Vr,[2,111]),o($Vr,[2,112]),{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),{8:[2,72],66:[1,79],68:$Vs},{107:[1,81]},o($Vt,[2,74]),o($Vu,[2,113]),o($Vu,[2,114]),{9:86,21:91,33:84,34:82,41:$Vv,67:83,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:98,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{42:[1,101],65:100,69:$Vm},{119:[1,102],120:[1,103]},{9:86,21:91,34:104,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:105,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:106,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{7:107,10:108,64:109,69:[1,110],94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd},{9:86,21:91,34:111,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:112,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{57:[1,113]},{4:114,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:115,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:116,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:117,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:118,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:119,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:120,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:121,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,33:124,34:122,41:$Vv,67:123,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{69:[1,125]},{69:[1,126],106:[1,127]},o($VF,[2,75],{35:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU}),o($VF,[2,76]),o($VF,[2,77]),{9:86,21:91,34:143,41:$VE,64:144,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},o($Vu,[2,81]),{9:86,21:91,34:145,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:146,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},o($Vu,[2,98],{99:$Vo,100:$Vp,106:[1,147]}),o($Vu,[2,99]),o($Vu,[2,100]),o($Vu,[2,101]),o($Vu,[2,102]),o($Vu,[2,103]),o($Vu,[2,104]),o($Vu,[2,105]),o($Vu,[2,106]),{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,107:[1,148]},{9:86,21:91,34:143,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{42:[1,149],68:$Vs},{8:[2,149]},{41:[1,150]},{41:[1,151]},{42:[1,152],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,153],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,154],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{8:[1,155]},{8:[1,156]},{65:55,69:$Vm},{66:$Vn},{42:[1,157],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,158],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{8:[2,64]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,39:[1,159],40:$V1,50:$V2,57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{42:[1,160],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,161],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,162],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,163],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,164],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,165],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,166],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{8:[2,69],35:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{8:[2,70]},{8:[2,71]},o($Vt,[2,73]),{66:[1,167]},{107:[1,168]},{9:86,21:91,34:169,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:170,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:171,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:172,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:173,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:174,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:175,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:176,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:177,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:178,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:179,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:180,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:181,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:182,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:183,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{42:[1,184],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,185]},o($VV,[2,88],{74:$VJ,75:$VK,76:$VL,77:$VM}),o($VW,[2,97],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS}),{9:86,21:91,34:186,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{66:[1,187],106:[1,188]},{8:[2,148]},{9:86,21:91,34:189,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{42:[1,190]},{8:[2,78]},{8:[2,79]},{37:192,38:$VX,43:191},{9:86,21:91,34:194,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:195,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{38:[1,196]},{37:197,38:$Vq},o($VY,[2,45]),o($Vu,[2,139]),o($Vu,[2,140]),o($Vu,[2,141]),o($Vu,[2,142]),o($Vu,[2,143]),o($Vu,[2,144]),o($Vu,[2,145]),{38:[1,199],108:[1,198]},{69:[1,200]},o($VV,[2,82],{74:$VJ,75:$VK,76:$VL,77:$VM}),o($VV,[2,83],{74:$VJ,75:$VK,76:$VL,77:$VM}),o($VZ,[2,84],{76:$VL}),o($VZ,[2,85],{76:$VL}),o($Vu,[2,86]),o($VZ,[2,87],{76:$VL}),o($V_,[2,89],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),o($V_,[2,90],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),o($V_,[2,91],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),o($V_,[2,92],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),o($V_,[2,93],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),o($V_,[2,94],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM}),o($VW,[2,95],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS}),o([8,35,36,39,42,68,85,107],[2,96],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),{36:[1,201],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},o($Vu,[2,80]),{9:86,21:91,34:202,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,107:[1,203]},{9:86,21:91,34:204,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:205,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{42:[1,206],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{8:[2,147]},o($Vl,[2,46],{44:207,45:208,46:209,47:[1,211],48:$V$}),o($VY,[2,54]),{4:114,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,39:[1,212],40:$V1,50:$V2,57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{8:[1,213],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{8:[1,214],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{51:215,52:216,53:217,54:[1,218],56:$V01},o($Vl,[2,63]),{64:220,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd},{9:86,21:91,34:222,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,109:221,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{66:[1,223]},{9:86,21:91,34:224,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},o($VF,[2,107],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU}),o($Vu,[2,135],{106:[1,225]}),{8:[2,137],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,107:[1,226]},{8:[2,146]},o($Vl,[2,47]),o($Vl,[2,48]),o($Vl,[2,49],{45:227,47:[1,228],48:$V$}),{49:[1,229]},{41:[1,230]},o($VY,[2,55]),{9:232,10:233,63:231,69:$V11},{9:232,10:233,63:235,69:$V11},{39:[1,236]},{39:[2,58],53:237,54:[1,238],56:$V01},{39:[2,59]},{9:86,21:91,34:239,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{36:[1,240]},{106:[1,241]},{39:[1,242],68:$V21},o($V31,[2,132],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU}),{38:[1,245],108:[1,244]},o($VF,[2,44],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU}),{9:86,21:91,34:246,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{66:[1,247]},o($Vl,[2,50]),{41:[1,248]},o($Vl,[2,53]),{9:86,21:91,34:249,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{42:[1,250]},{42:[2,67]},{42:[2,68]},{66:$Vn,99:$Vo,100:$Vp},{42:[1,251]},o($Vl,[2,56]),{39:[2,57]},{9:86,21:91,34:252,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{36:[1,253],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{4:254,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:255,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{8:[2,129]},{9:86,21:91,34:256,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{64:257,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd},{38:[1,259],110:258},{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,107:[1,260]},{9:86,21:91,34:261,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{9:86,21:91,34:262,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{42:[1,263],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{37:192,38:$VX,43:264},{37:192,38:$VX,43:265},{36:[1,266],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{4:267,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,55:[1,268],57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,107:[1,269]},o($V31,[2,131],{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU}),{106:[1,270]},{39:[1,271],68:[1,272]},{9:86,21:91,34:222,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,109:273,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},o($Vu,[2,136]),{8:[2,138],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{42:[1,274],72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU},{37:192,38:$VX,43:275},o($Vl,[2,65]),o($Vl,[2,66]),{4:276,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,55:[1,277],57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{8:[1,278]},{8:[2,127]},{9:86,21:91,34:279,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{8:[2,130]},{38:[1,280]},{39:[1,281],68:$V21},{37:192,38:$VX,43:282},o($VY,[2,51]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,40:$V1,50:$V2,55:[1,283],57:$V3,58:$V4,62:$V5,64:20,69:$V6,70:$V7,71:$V8,94:$V9,95:$Va,96:$Vb,97:$Vc,98:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},{8:[1,284]},{39:[2,62]},{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,107:[1,285]},{9:86,21:91,34:222,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,109:286,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},o($V31,[2,134]),o($VY,[2,52]),{8:[1,287]},o($V41,[2,60]),{106:[1,288]},{39:[1,289],68:$V21},o($V41,[2,61]),{9:86,21:91,34:290,41:$VE,69:$Vw,73:$Vx,86:$Vy,87:90,88:92,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj,117:$Vk},o($V31,[2,133]),{72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,107:[1,291]},{8:[2,128]}],
defaultActions: {41:[2,1],101:[2,149],113:[2,64],123:[2,70],124:[2,71],149:[2,148],152:[2,78],153:[2,79],190:[2,147],206:[2,146],217:[2,59],232:[2,67],233:[2,68],237:[2,57],242:[2,129],269:[2,127],271:[2,130],278:[2,62],291:[2,128]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // acá vamos a importar todas las clases que necesitemos
    // require es como un import, cada punto antes de la ruta es un directorio hacia atrás del actual, qu sería src
    
    //acá usamos el punto antes de la ruta para buicarnos seguún el directorio
    //const {Declaracion} = require('../instruccion/declaracion');
    //const {Declaracion_2} = require('../instruccion/declaracion_2');
    //const {Type} = require('../symbol/type');
    //const {Arithmetic} = require('../expression/aritmeticas');
    //const {ArithmeticOption} = require('../expression/aritmeticOption');
    //const {Literal} = require('../expression/literal');
    //const {PrintEnv} = require('../instruccion/printEnv');
    //const {Asignacion} = require('../instruccion/asignacion');
    //const {Print} = require('../instruccion/print');
    //const {If} = require('../instruccion/condicionif');
    //const {For} = require('../instruccion/for');
    //const {Relacional} = require('../expression/relacional');
    //const {RelacionalOption} = require('../expression/relacionalOption');
   // const {Logico} = require('../expression/logico');
    //const {LogicoOption} = require('../expression/logicoOptions');
    //const {Casteo} = require('../expression/casteo');
    //const {Buscador} = require('../expression/buscador');
    //const {C_if} = require('../objetos/condiciones_if');
    //const {Statement} = require('../instruccion/Statement');

    const {Nodo} = require('./nodo');
    var contador = 0;

    // const {el nombre con el que lo vamos a usar acá}  = require('ruta');

    //var ides = [];
    //var condiciones_if = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: console.log("Se encontró el token <if> con valor: "+ yy_.yytext );  return 40
break;
case 4: console.log("Se encontró el token <else> con valor: "+ yy_.yytext ); return 48
break;
case 5: console.log("Se encontró el token <elif> con valor: "+ yy_.yytext ); return 47
break;
case 6: console.log("Se encontró el token <switch> con valor: "+ yy_.yytext ); return 50
break;
case 7: console.log("Se encontró el token <case> con valor: "+ yy_.yytext ); return 54
break;
case 8: console.log("Se encontró el token <for> con valor: "+ yy_.yytext ); return 62
break;
case 9: console.log("Se encontró el token <do> con valor: "+ yy_.yytext ); return 58
break;
case 10: console.log("Se encontró el token <void> con valor: "+ yy_.yytext ); return 102
break;
case 11: console.log("Se encontró el token <while> con valor: "+ yy_.yytext ); return 57
break;
case 12: console.log("Se encontró el token <default> con valor: "+ yy_.yytext ); return 56
break;
case 13: console.log("Se encontró el token <until> con valor: "+ yy_.yytext ); return 61
break;
case 14: console.log("Se encontró el token <break> con valor: "+ yy_.yytext ); return 55
break;
case 15: console.log("Se encontró el token <continue> con valor: "+ yy_.yytext ); return 105
break;
case 16: console.log("Se encontró el token <return> con valor: "+ yy_.yytext ); return 103
break;
case 17: console.log("Se encontró el token <println> con valor: "+ yy_.yytext ); return 71
break;
case 18: console.log("Se encontró el token <print> con valor: "+ yy_.yytext ); return 70
break;
case 19: console.log("Se encontró el token <tolower> con valor: "+ yy_.yytext ); return 111
break;
case 20: console.log("Se encontró el token <toupper> con valor: "+ yy_.yytext ); return 112
break;
case 21: console.log("Se encontró el token <round> con valor: "+ yy_.yytext ); return 113
break;
case 22: console.log("Se encontró el token <length> con valor: "+ yy_.yytext ); return 114
break;
case 23: console.log("Se encontró el token <typeof> con valor: "+ yy_.yytext ); return 115
break;
case 24: console.log("Se encontró el token <tostring> con valor: "+ yy_.yytext ); return 116
break;
case 25: console.log("Se encontró el token <tochar array> con valor: "+ yy_.yytext ); return 117
break;
case 26: console.log("Se encontró el token <push> con valor: "+ yy_.yytext ); return 119
break;
case 27: console.log("Se encontró el token <pop> con valor: "+ yy_.yytext ); return 120
break;
case 28: console.log("Se encontró el token <run> con valor: "+ yy_.yytext ); return 122
break;
case 29: console.log("Se encontró el token <new> con valor: "+ yy_.yytext ); return 108
break;
case 30: console.log("Se encontró el token <int> con valor: "+ yy_.yytext ); return 94
break;
case 31: console.log("Se encontró el token <double> con valor: "+ yy_.yytext ); return 95
break;
case 32: console.log("Se encontró el token <string> con valor: "+ yy_.yytext ); return 96
break;
case 33: console.log("Se encontró el token <boolean> con valor: "+ yy_.yytext ); return 97
break;
case 34: console.log("Se encontró el token <char> con valor: "+ yy_.yytext ); return 98
break;
case 35: console.log("Se encontró el token >= con valor: "+ yy_.yytext ); return 81
break;
case 36: console.log("Se encontró el token <= con valor: "+ yy_.yytext ); return 80
break;
case 37: console.log("Se encontró el token > con valor: "+ yy_.yytext ); return 79
break;
case 38: console.log("Se encontró el token < con valor: "+ yy_.yytext ); return 78
break;
case 39: console.log("Se encontró el token <==> con valor: "+ yy_.yytext ); return 82
break;
case 40: console.log("Se encontró el token <!=> con valor: "+ yy_.yytext ); return 83
break;
case 41: console.log("Se encontró el token <!> con valor: "+ yy_.yytext ); return 86
break;
case 42: console.log("Se encontró el token <&&> con valor: "+ yy_.yytext ); return 84
break;
case 43: console.log("Se encontró el token <||> con valor: "+ yy_.yytext ); return 85
break;
case 44: console.log("Se encontró el token <++> con valor: "+ yy_.yytext ); return 99
break;
case 45: console.log("Se encontró el token <--> con valor: "+ yy_.yytext ); return 100
break;
case 46: console.log("Se encontró el token <+> con valor: "+ yy_.yytext ); return 72
break;
case 47: console.log("Se encontró el token <-> con valor: "+ yy_.yytext ); return 73
break;
case 48: console.log("Se encontró el token <*> con valor: "+ yy_.yytext ); return 74
break;
case 49: console.log("Se encontró el token </> con valor: "+ yy_.yytext ); return 75
break;
case 50: console.log("Se encontró el token <^> con valor: "+ yy_.yytext ); return 76
break;
case 51: console.log("Se encontró el token <%> con valor: "+ yy_.yytext ); return 77
break;
case 52: console.log("Se encontró el token <,> con valor: "+ yy_.yytext ); return 68
break;
case 53: console.log("Se encontró el token <;> con valor: "+ yy_.yytext ); return 8
break;
case 54: console.log("Se encontró el token <:> con valor: "+ yy_.yytext ); return 36
break;
case 55: console.log("Se encontró el token <=> con valor: "+ yy_.yytext ); return 66
break;
case 56: console.log("Se encontró el token <(> con valor: "+ yy_.yytext ); return 41
break;
case 57: console.log("Se encontró el token <)> con valor: "+ yy_.yytext ); return 42
break;
case 58: console.log("Se encontró el token <{> con valor: "+ yy_.yytext ); return 38
break;
case 59: console.log("Se encontró el token <}> con valor: "+ yy_.yytext ); return 39
break;
case 60: console.log("Se encontró el token <[]> con valor: "+ yy_.yytext ); return 106
break;
case 61: console.log("Se encontró el token <]> con valor: "+ yy_.yytext ); return 107
break;
case 62: console.log("Se encontró el token <.> con valor: "+ yy_.yytext ); return 118
break;
case 63: console.log("Se encontró el token <?> con valor: "+ yy_.yytext ); return 35
break;
case 64: console.log("Se encontró el token <id> con valor: "+ yy_.yytext ); return 69 
break;
case 65: console.log("Se encontró el token <double> con valor: "+ yy_.yytext ); return 92 
break;
case 66: console.log("Se encontró el token <int> con valor: "+ yy_.yytext ); return 89 
break;
case 67: console.log("Se encontró el token <bool> con valor: "+ yy_.yytext ); return 91 
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); console.log("Se encontró el token <char> con valor: "+ yy_.yytext ); return 93
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); console.log("Se encontró el token <string> con valor: "+ yy_.yytext ); return 90
break;
case 70:return 5
break;
case 71: 
        console.log("error lexico")
             // reporte para el usuario dónde está el error y por qué fue
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:default\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:((([a-zA-Z])|_)(([a-zA-Z])|_|([0-9]))*))/i,/^(?:((([0-9])+)\.(([0-9])+)))/i,/^(?:(([0-9])+))/i,/^(?:(true|false\b))/i,/^(?:('([^\']|\\|\\n|\\t|\\r|\\|\\')'))/i,/^(?:("[^\"]*"|“[^\"]*”))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}