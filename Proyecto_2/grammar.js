/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GRAMMAR = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,21],$V2=[1,15],$V3=[1,12],$V4=[1,13],$V5=[1,22],$V6=[1,23],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,16],$Vd=[1,17],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[5,20,21,22,25,31,32,36,49,51,52,53,54,55,56,57,58,59,60],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,53],$Vw=[2,45],$Vx=[1,54],$Vy=[23,31],$Vz=[1,59],$VA=[8,16,17,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$VB=[8,28,30],$VC=[8,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$VD=[1,81],$VE=[1,86],$VF=[1,87],$VG=[8,16,17,23,35,36,41,42,43,44,45,46,47,48],$VH=[8,16,17,23,47,48],$VI=[8,16,17,23,35,36,37,38,40,41,42,43,44,45,46,47,48],$VJ=[8,16,17,23,41,42,43,44,45,46,47,48],$VK=[8,23],$VL=[1,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"DECLARACION":7,";":8,"INDECREMENTO":9,"ASIGNACION":10,"PRINT":11,"CONDICIONIF":12,"CICLOFOR":13,"OPTERNARIO":14,"EXPRE":15,"?":16,":":17,"BLOQUE":18,"{":19,"}":20,"tif":21,"(":22,")":23,"telse":24,"tfor":25,"TIPOS":26,"LISTA_ID":27,"=":28,"CASTEO":29,",":30,"id":31,"tprint":32,"++":33,"--":34,"+":35,"-":36,"*":37,"/":38,"^":39,"%":40,"<":41,">":42,"<=":43,">=":44,"==":45,"!=":46,"&&":47,"||":48,"!":49,"F":50,"expreINT":51,"expreCADENA":52,"expreBOOL":53,"expreDOUBLE":54,"expreCHAR":55,"tint":56,"tdouble":57,"tstring":58,"tbool":59,"tchar":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",16:"?",17:":",19:"{",20:"}",21:"tif",22:"(",23:")",24:"telse",25:"tfor",28:"=",30:",",31:"id",32:"tprint",33:"++",34:"--",35:"+",36:"-",37:"*",38:"/",39:"^",40:"%",41:"<",42:">",43:"<=",44:">=",45:"==",46:"!=",47:"&&",48:"||",49:"!",51:"expreINT",52:"expreCADENA",53:"expreBOOL",54:"expreDOUBLE",55:"expreCHAR",56:"tint",57:"tdouble",58:"tstring",59:"tbool",60:"tchar"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[14,5],[18,3],[12,7],[12,5],[12,7],[13,9],[7,4],[7,4],[7,2],[27,3],[27,1],[10,3],[10,3],[10,3],[11,4],[15,2],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,1],[15,1],[50,1],[50,1],[50,1],[50,1],[50,1],[29,4],[26,1],[26,1],[26,1],[26,1],[26,1],[9,2],[9,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,15:11,21:$V0,22:$V1,25:$V2,26:10,31:$V3,32:$V4,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg},{1:[3]},{5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,15:11,21:$V0,22:$V1,25:$V2,26:10,31:$V3,32:$V4,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg},o($Vh,[2,3]),{8:[1,32]},{8:[1,33]},{8:[1,34]},o($Vh,[2,7],{8:[1,35]}),o($Vh,[2,9]),o($Vh,[2,10]),{27:36,31:[1,37]},{33:[1,38],34:[1,39],35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv},o([33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$Vw,{28:$Vx}),{22:[1,55]},{22:[1,56]},{22:[1,57]},o($Vy,[2,53]),o($Vy,[2,54]),o($Vy,[2,55]),o($Vy,[2,56]),o($Vy,[2,57]),{15:58,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:60,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:61,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},o($VA,[2,46]),o($VA,[2,47]),o($VA,[2,48]),o($VA,[2,49]),o($VA,[2,50]),o($VA,[2,51]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,8]),{8:[2,19],28:[1,62],30:[1,63]},o($VB,[2,21]),o($VC,[2,58]),o($VC,[2,59]),{15:64,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:65,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:66,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:67,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:68,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:69,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:70,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:71,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:72,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:73,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:74,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:75,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:76,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:77,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{14:80,15:78,22:$VD,29:79,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:82,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{15:83,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{7:84,26:10,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg},{23:[1,85],33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv},o($VA,$Vw),o($VG,[2,35],{33:$VE,34:$VF,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VH,[2,44],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),{15:88,22:$VD,29:89,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{31:[1,90]},o($VG,[2,29],{33:$VE,34:$VF,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VG,[2,30],{33:$VE,34:$VF,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VI,[2,31],{33:$VE,34:$VF,39:$Vm}),o($VI,[2,32],{33:$VE,34:$VF,39:$Vm}),o([8,16,17,23,35,36,37,38,39,40,41,42,43,44,45,46,47,48],[2,33],{33:$VE,34:$VF}),o($VI,[2,34],{33:$VE,34:$VF,39:$Vm}),o($VJ,[2,36],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VJ,[2,37],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VJ,[2,38],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VJ,[2,39],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VJ,[2,40],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VJ,[2,41],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn}),o($VH,[2,42],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o([8,16,17,23,48],[2,43],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu}),o($VK,[2,22],{16:[1,91],33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv}),o($VK,[2,23]),o($VK,[2,24]),{15:58,22:$V1,26:92,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg},{23:[1,93],33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv},{23:[1,94],33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv},{8:[1,95]},o($VA,[2,28]),o($VA,[2,26]),o($VA,[2,27]),{8:[2,17],33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv},{8:[2,18]},o($VB,[2,20]),{15:96,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{23:[1,97]},o([5,8,20,21,22,25,31,32,36,49,51,52,53,54,55,56,57,58,59,60],[2,25]),{18:98,19:$VL},{15:100,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},{17:[1,101],33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv},{15:102,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},o($Vh,[2,14],{24:[1,103]}),{4:104,6:3,7:4,9:5,10:6,11:7,12:8,13:9,15:11,21:$V0,22:$V1,25:$V2,26:10,31:$V3,32:$V4,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg},{8:[1,105],33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv},{15:106,22:$V1,31:$Vz,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb},o($VK,[2,52],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv}),{12:108,18:107,19:$VL,21:$V0},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,15:11,20:[1,109],21:$V0,22:$V1,25:$V2,26:10,31:$V3,32:$V4,36:$V5,49:$V6,50:24,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg},{10:110,31:[1,111]},o($VK,[2,11],{33:$VE,34:$VF,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv}),o($Vh,[2,13]),o($Vh,[2,15]),o([5,20,21,22,24,25,31,32,36,49,51,52,53,54,55,56,57,58,59,60],[2,12]),{23:[1,112]},{28:$Vx},{18:113,19:$VL},o($Vh,[2,16])],
defaultActions: {30:[2,1],89:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // acá vamos a importar todas las clases que necesitemos
    // require es como un import, cada punto antes de la ruta es un directorio hacia atrás del actual, qu sería src
    
    //acá usamos el punto antes de la ruta para buicarnos seguún el directorio
    //const {Declaracion} = require('../instruccion/declaracion');
    //const {Declaracion_2} = require('../instruccion/declaracion_2');
    //const {Type} = require('../symbol/type');
    //const {Arithmetic} = require('../expression/aritmeticas');
    //const {ArithmeticOption} = require('../expression/aritmeticOption');
    //const {Literal} = require('../expression/literal');
    //const {PrintEnv} = require('../instruccion/printEnv');
    //const {Asignacion} = require('../instruccion/asignacion');
    //const {Print} = require('../instruccion/print');
    //const {If} = require('../instruccion/condicionif');
    //const {For} = require('../instruccion/for');
    //const {Relacional} = require('../expression/relacional');
    //const {RelacionalOption} = require('../expression/relacionalOption');
   // const {Logico} = require('../expression/logico');
    //const {LogicoOption} = require('../expression/logicoOptions');
    //const {Casteo} = require('../expression/casteo');
    //const {Buscador} = require('../expression/buscador');
    //const {C_if} = require('../objetos/condiciones_if');
    //const {Statement} = require('../instruccion/Statement');


    // const {el nombre con el que lo vamos a usar acá}  = require('ruta');

    //var ides = [];
    //var condiciones_if = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 51 
break;
case 4:return 54 
break;
case 5:return 53 
break;
case 6:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 55
break;
case 7:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 'expreSTRING'
break;
case 8:return 31
break;
case 9:return 21
break;
case 10:return 24
break;
case 11:return 'telif'
break;
case 12:return 'tswitch'
break;
case 13:return 'tcase'
break;
case 14:return 25
break;
case 15:return 'tdo'
break;
case 16:return 'tvoid'
break;
case 17:return 'twhile'
break;
case 18:return 'tdefault'
break;
case 19:return 'tuntil'
break;
case 20:return 'tbreak'
break;
case 21:return 'tcontinue'
break;
case 22:return 'treturn'
break;
case 23:return 'tprintln'
break;
case 24:return 32
break;
case 25:return 'ttolower'
break;
case 26:return 'ttoupper'
break;
case 27:return 'tround'
break;
case 28:return 'tlength'
break;
case 29:return 'ttypeof'
break;
case 30:return 'ttostring'
break;
case 31:return 'ttochararray'
break;
case 32:return 'tpush'
break;
case 33:return 'tpop'
break;
case 34:return 'trun'
break;
case 35:return 56
break;
case 36:return 57
break;
case 37:return 58
break;
case 38:return 59
break;
case 39:return 60
break;
case 40:return 44
break;
case 41:return 43
break;
case 42:return 42
break;
case 43:return 41
break;
case 44:return 45
break;
case 45:return 46
break;
case 46:return 49
break;
case 47:return 47
break;
case 48:return 48
break;
case 49:return 35
break;
case 50:return 36
break;
case 51:return 33
break;
case 52:return 34
break;
case 53:return 37
break;
case 54:return 38
break;
case 55:return 39
break;
case 56:return 40
break;
case 57:return 30
break;
case 58:return 8
break;
case 59:return 17
break;
case 60:return 28
break;
case 61:return 22
break;
case 62:return 23
break;
case 63:return 19
break;
case 64:return 20
break;
case 65:return '['
break;
case 66:return ']'
break;
case 67:return '.'
break;
case 68:return 16
break;
case 69:return 5
break;
case 70: 
        console.log("error lexico")
             // reporte para el usuario dónde está el error y por qué fue
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9])+))/i,/^(?:((([0-9])+)\.(([0-9])+)))/i,/^(?:(true|false\b))/i,/^(?:(\\'([^\']|\\|\\n|\\t|\\r|\\|\\')\\'))/i,/^(?:("[^\"]*"))/i,/^(?:((([a-zA-Z])|_|([0-9]))+))/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:default\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GRAMMAR;
exports.Parser = GRAMMAR.Parser;
exports.parse = function () { return GRAMMAR.parse.apply(GRAMMAR, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}