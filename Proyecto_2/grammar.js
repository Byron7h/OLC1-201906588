/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,19],$V2=[1,20],$V3=[1,18],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[5,23,24,31,36,38,39,45,46,47,69,70,71,72,73],$Vd=[1,37],$Ve=[1,35],$Vf=[1,36],$Vg=[26,45],$Vh=[8,42,44],$Vi=[8,19,20,26,48,49,50,51,52,53,54,55,56,57,58,59,60,61],$Vj=[1,49],$Vk=[1,53],$Vl=[1,51],$Vm=[1,52],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,61],$Vt=[8,26],$Vu=[1,85],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[8,19,20,26,48,49,54,55,56,57,58,59,60,61],$VK=[8,19,20,26,60,61],$VL=[1,114],$VM=[8,19,20,26,48,49,50,51,53,54,55,56,57,58,59,60,61],$VN=[8,19,20,26,54,55,56,57,58,59,60,61],$VO=[1,130],$VP=[5,23,24,30,31,36,38,39,45,46,47,69,70,71,72,73],$VQ=[23,35,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"DECLARACION":7,";":8,"INDECREMENTO":9,"ASIGNACION":10,"PRINT":11,"PRINTLN":12,"IF":13,"CICLOFOR":14,"SWITCH":15,"WHILE":16,"OPTERNARIO":17,"EXPRE":18,"?":19,":":20,"BLOQUE":21,"{":22,"}":23,"tif":24,"(":25,")":26,"COMPLEMENTO_IF":27,"ELSE":28,"LISTA_ELIF":29,"telif":30,"tswitch":31,"COMPLEMENTO_SWITCH":32,"LISTA_CASE":33,"DEFAULT_CASE":34,"tcase":35,"tbreak":36,"tdefault":37,"twhile":38,"tfor":39,"TIPOS":40,"LISTA_ID":41,"=":42,"CASTEO":43,",":44,"id":45,"tprint":46,"tprintln":47,"+":48,"-":49,"*":50,"/":51,"^":52,"%":53,"<":54,">":55,"<=":56,">=":57,"==":58,"!=":59,"&&":60,"||":61,"!":62,"F":63,"expreINT":64,"expreSTRING":65,"expreBOOL":66,"expreDOUBLE":67,"expreCHAR":68,"tint":69,"tdouble":70,"tstring":71,"tbool":72,"tchar":73,"++":74,"--":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:";",19:"?",20:":",22:"{",23:"}",24:"tif",25:"(",26:")",30:"telif",31:"tswitch",35:"tcase",36:"tbreak",37:"tdefault",38:"twhile",39:"tfor",42:"=",44:",",45:"id",46:"tprint",47:"tprintln",48:"+",49:"-",50:"*",51:"/",52:"^",53:"%",54:"<",55:">",56:"<=",57:">=",58:"==",59:"!=",60:"&&",61:"||",62:"!",64:"expreINT",65:"expreSTRING",66:"expreBOOL",67:"expreDOUBLE",68:"expreCHAR",69:"tint",70:"tdouble",71:"tstring",72:"tbool",73:"tchar",74:"++",75:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[17,5],[21,3],[13,5],[13,6],[27,1],[27,1],[27,2],[29,5],[29,6],[28,2],[15,7],[32,2],[32,1],[32,1],[33,6],[33,7],[34,5],[16,5],[14,9],[7,4],[7,4],[7,4],[7,2],[41,3],[41,1],[10,3],[10,3],[10,3],[11,4],[12,4],[18,3],[18,1],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,1],[18,1],[63,1],[63,1],[63,1],[63,1],[63,1],[43,4],[40,1],[40,1],[40,1],[40,1],[40,1],[9,2],[9,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{1:[3]},{5:[1,26],6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},o($Vc,[2,3]),{8:[1,28]},{8:[1,29]},{8:[1,30]},o($Vc,[2,7],{8:[1,31]}),{8:[1,32]},o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),{41:33,45:[1,34]},{42:$Vd,74:$Ve,75:$Vf},{25:[1,38]},{25:[1,39]},{25:[1,40]},{25:[1,41]},{25:[1,42]},{25:[1,43]},o($Vg,[2,70]),o($Vg,[2,71]),o($Vg,[2,72]),o($Vg,[2,73]),o($Vg,[2,74]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,8]),o($Vc,[2,9]),{8:[2,36],42:[1,44],44:[1,45]},o($Vh,[2,38]),o($Vi,[2,75]),o($Vi,[2,76]),{9:50,17:48,18:46,25:$Vj,43:47,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:60,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:62,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:63,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{7:64,40:13,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{9:50,18:65,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:66,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,17:69,18:67,25:$Vj,43:68,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{45:[1,70]},o($Vt,[2,39],{19:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($Vt,[2,40]),o($Vt,[2,41]),{9:50,18:86,25:$Vs,40:87,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},o($Vi,[2,45]),{9:50,18:88,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:89,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},o($Vi,[2,62],{74:$Ve,75:$Vf}),o($Vi,[2,63]),o($Vi,[2,64]),o($Vi,[2,65]),o($Vi,[2,66]),o($Vi,[2,67]),o($Vi,[2,68]),{26:[1,90],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{9:50,18:86,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{26:[1,91],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{26:[1,92],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{8:[1,93]},{26:[1,94],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{26:[1,95],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{8:[2,33],19:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{8:[2,34]},{8:[2,35]},o($Vh,[2,37]),{9:50,18:96,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:97,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:98,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:99,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:100,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:101,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:102,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:103,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:104,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:105,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:106,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:107,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:108,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:109,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{9:50,18:110,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{26:[1,111],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{26:[1,112]},o($VJ,[2,52],{50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VK,[2,61],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),o([5,8,23,24,31,36,38,39,45,46,47,69,70,71,72,73],[2,42]),{8:[2,43]},{21:113,22:$VL},{9:50,18:115,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{22:[1,116]},{21:117,22:$VL},o($VJ,[2,46],{50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VJ,[2,47],{50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VM,[2,48],{52:$Vz}),o($VM,[2,49],{52:$Vz}),o($Vi,[2,50]),o($VM,[2,51],{52:$Vz}),o($VN,[2,53],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VN,[2,54],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VN,[2,55],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VN,[2,56],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VN,[2,57],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VN,[2,58],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA}),o($VK,[2,59],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),o([8,19,20,26,61],[2,60],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),{20:[1,118],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},o($Vi,[2,44]),{9:50,18:119,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},o($Vc,[2,16],{27:120,28:121,29:122,30:[1,123]}),{4:124,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{8:[1,125],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{32:126,33:127,34:128,35:[1,129],37:$VO},o($Vc,[2,31]),{9:50,18:131,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},o($Vt,[2,69],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19],{28:132,30:[1,133]}),{21:134,22:$VL,25:[1,135]},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,23:[1,136],24:$V0,31:$V1,38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{10:137,45:[1,138]},{23:[1,139]},{23:[2,26],34:140,35:[1,141],37:$VO},{23:[2,27]},{9:50,18:142,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{20:[1,143]},o($Vt,[2,14],{48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($Vc,[2,20]),{21:134,22:$VL,25:[1,144]},o($Vc,[2,23]),{9:50,18:145,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},o($VP,[2,15]),{26:[1,146]},{42:$Vd},o($Vc,[2,24]),{23:[2,25]},{9:50,18:147,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{20:[1,148],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{4:149,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{9:50,18:150,25:$Vs,45:$Vk,49:$Vl,62:$Vm,63:54,64:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr},{26:[1,151],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{21:152,22:$VL},{20:[1,153],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{4:154,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,36:[1,155],38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{26:[1,156],48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI},{21:157,22:$VL},o($Vc,[2,32]),{4:158,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,36:[1,159],38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{8:[1,160]},{21:161,22:$VL},o($VP,[2,21]),{6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:$V0,31:$V1,36:[1,162],38:$V2,39:$V3,40:13,45:$V4,46:$V5,47:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb},{8:[1,163]},{23:[2,30]},o($VP,[2,22]),{8:[1,164]},o($VQ,[2,28]),o($VQ,[2,29])],
defaultActions: {26:[2,1],68:[2,34],69:[2,35],91:[2,43],128:[2,27],140:[2,25],160:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // acá vamos a importar todas las clases que necesitemos
    // require es como un import, cada punto antes de la ruta es un directorio hacia atrás del actual, qu sería src
    
    //acá usamos el punto antes de la ruta para buicarnos seguún el directorio
    //const {Declaracion} = require('../instruccion/declaracion');
    //const {Declaracion_2} = require('../instruccion/declaracion_2');
    //const {Type} = require('../symbol/type');
    //const {Arithmetic} = require('../expression/aritmeticas');
    //const {ArithmeticOption} = require('../expression/aritmeticOption');
    //const {Literal} = require('../expression/literal');
    //const {PrintEnv} = require('../instruccion/printEnv');
    //const {Asignacion} = require('../instruccion/asignacion');
    //const {Print} = require('../instruccion/print');
    //const {If} = require('../instruccion/condicionif');
    //const {For} = require('../instruccion/for');
    //const {Relacional} = require('../expression/relacional');
    //const {RelacionalOption} = require('../expression/relacionalOption');
   // const {Logico} = require('../expression/logico');
    //const {LogicoOption} = require('../expression/logicoOptions');
    //const {Casteo} = require('../expression/casteo');
    //const {Buscador} = require('../expression/buscador');
    //const {C_if} = require('../objetos/condiciones_if');
    //const {Statement} = require('../instruccion/Statement');


    // const {el nombre con el que lo vamos a usar acá}  = require('ruta');

    //var ides = [];
    //var condiciones_if = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 24
break;
case 4:return 'telse'
break;
case 5:return 30
break;
case 6:return 31
break;
case 7:return 35
break;
case 8:return 39
break;
case 9:return 'tdo'
break;
case 10:return 'tvoid'
break;
case 11:return 38
break;
case 12:return 37
break;
case 13:return 'tuntil'
break;
case 14:return 36
break;
case 15:return 'tcontinue'
break;
case 16:return 'treturn'
break;
case 17:return 47
break;
case 18:return 46
break;
case 19:return 'ttolower'
break;
case 20:return 'ttoupper'
break;
case 21:return 'tround'
break;
case 22:return 'tlength'
break;
case 23:return 'ttypeof'
break;
case 24:return 'ttostring'
break;
case 25:return 'ttochararray'
break;
case 26:return 'tpush'
break;
case 27:return 'tpop'
break;
case 28:return 'trun'
break;
case 29:return 69
break;
case 30:return 70
break;
case 31:return 71
break;
case 32:return 72
break;
case 33:return 73
break;
case 34:return 57
break;
case 35:return 56
break;
case 36:return 55
break;
case 37:return 54
break;
case 38:return 58
break;
case 39:return 59
break;
case 40:return 62
break;
case 41:return 60
break;
case 42:return 61
break;
case 43:return 74
break;
case 44:return 75
break;
case 45:return 48
break;
case 46:return 49
break;
case 47:return 50
break;
case 48:return 51
break;
case 49:return 52
break;
case 50:return 53
break;
case 51:return 44
break;
case 52:return 8
break;
case 53:return 20
break;
case 54:return 42
break;
case 55:return 25
break;
case 56:return 26
break;
case 57:return 22
break;
case 58:return 23
break;
case 59:return '['
break;
case 60:return ']'
break;
case 61:return '.'
break;
case 62:return 19
break;
case 63:return 45
break;
case 64:return 64 
break;
case 65:return 67 
break;
case 66:return 66 
break;
case 67:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68
break;
case 68:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65
break;
case 69:return 5
break;
case 70: 
        console.log("error lexico")
             // reporte para el usuario dónde está el error y por qué fue
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:default\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:((([a-zA-Z])|_|([0-9]))+))/i,/^(?:(([0-9])+))/i,/^(?:((([0-9])+)\.(([0-9])+)))/i,/^(?:(true|false\b))/i,/^(?:('([^\']|\\|\\n|\\t|\\r|\\|\\')'))/i,/^(?:("[^\"]*"|“[^\"]*”))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}