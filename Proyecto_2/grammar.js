/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,27],$V2=[1,28],$V3=[1,29],$V4=[1,26],$V5=[1,21],$V6=[1,23],$V7=[1,24],$V8=[1,37],$V9=[1,38],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[5,39,40,49,54,56,57,59,66,67,68,91,92,93,94,95,108,109,110,111,112,113,114],$Vl=[1,59],$Vm=[1,57],$Vn=[1,58],$Vo=[1,64],$Vp=[1,72],$Vq=[38,41,42,66,70,83,86,87,88,89,90,103,108,109,110,111,112,113,114],$Vr=[1,85],$Vs=[1,89],$Vt=[1,87],$Vu=[1,88],$Vv=[1,94],$Vw=[1,95],$Vx=[1,96],$Vy=[1,97],$Vz=[1,98],$VA=[9,35,36,39,42,65,69,70,71,72,73,74,75,76,77,78,79,80,81,82,104],$VB=[1,102],$VC=[9,63,65],$VD=[1,132],$VE=[39,42,65],$VF=[1,134],$VG=[1,135],$VH=[1,136],$VI=[1,137],$VJ=[1,138],$VK=[1,139],$VL=[1,140],$VM=[1,141],$VN=[1,142],$VO=[1,143],$VP=[1,144],$VQ=[1,145],$VR=[1,146],$VS=[1,147],$VT=[9,42],$VU=[1,153],$VV=[42,65],$VW=[9,35,36,39,42,65,69,70,75,76,77,78,79,80,81,82,104],$VX=[9,35,36,39,42,65,81,82,104],$VY=[1,212],$VZ=[9,35,36,39,42,65,69,70,71,72,74,75,76,77,78,79,80,81,82,104],$V_=[9,35,36,39,42,65,75,76,77,78,79,80,81,82,104],$V$=[1,235],$V01=[5,39,40,47,48,49,54,56,57,59,66,67,68,91,92,93,94,95,108,109,110,111,112,113,114],$V11=[1,244],$V21=[1,261],$V31=[39,65],$V41=[39,53,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"FUNCION":7,"DECLARACION":8,";":9,"INDECREMENTO":10,"ASIGNACION":11,"PRINT":12,"PRINTLN":13,"IF":14,"CICLOFOR":15,"SWITCH":16,"WHILE":17,"DO_WHILE":18,"DO_UNTIL":19,"DECLARACION_VECTOR":20,"MODIFICACION_VECTOR":21,"FUNCIONES_NATIVAS":22,"LLAMADAS":23,"FUNCIONES_VECTORES":24,"FIJOS":25,"CICLOS":26,"INSTRUCCIONES_METODO":27,"RETURN_SOLO":28,"INSTRUCCIONES_FUNCION":29,"RETURN_VALOR":30,"GLOBALES":31,"METODO":32,"OPTERNARIO":33,"EXPRE":34,"?":35,":":36,"BLOQUE":37,"{":38,"}":39,"tif":40,"(":41,")":42,"ACCIONES_":43,"COMPLEMENTO_IF":44,"ELSE":45,"LISTA_ELIF":46,"telif":47,"telse":48,"tswitch":49,"COMPLEMENTO_SWITCH":50,"LISTA_CASE":51,"DEFAULT_CASE":52,"tcase":53,"tbreak":54,"tdefault":55,"twhile":56,"tdo":57,"tuntil":58,"tfor":59,"ACTUALIZACION_FOR":60,"TIPOS":61,"LISTA_ID":62,"=":63,"CASTEO":64,",":65,"id":66,"tprint":67,"tprintln":68,"+":69,"-":70,"*":71,"/":72,"^":73,"%":74,"<":75,">":76,"<=":77,">=":78,"==":79,"!=":80,"&&":81,"||":82,"!":83,"ACCESO_VECTOR":84,"F":85,"expreINT":86,"expreSTRING":87,"expreBOOL":88,"expreDOUBLE":89,"expreCHAR":90,"tint":91,"tdouble":92,"tstring":93,"tbool":94,"tchar":95,"++":96,"--":97,"LISTA_PARAMETROS":98,"tvoid":99,"treturn":100,"SENTENCIAS_TRANSFERENCIA":101,"tcontinue":102,"[":103,"]":104,"tnew":105,"LISTA_VALORES_1":106,"LISTA_VALORES_2":107,"ttolower":108,"ttoupper":109,"tround":110,"tlength":111,"ttypeof":112,"ttostring":113,"ttochararray":114,".":115,"tpush":116,"tpop":117,"\r\n":118,"var":119,"nuevo":120,"new":121,"Nodo(\"LLAMADA":122,"FUNCION\",":123,"contador++);\r\n":124,"nuevo_id":125,"Nodo(\"ID":126,"contador++,":127,"$1);":128,"nuevo.addHijos(nuevo_id);\r\n":129,"nuevo.addHijos($3);\r\n":130,"$$":131,"nuevo;":132,"console.log(\"SE":133,"ENCONTRÓ":134,"UNA":135,"LISTA":136,"DE":137,"VALORES":138,"\");\r\n":139,"}\r\n\r\n":140,"|":141,"}\r\n\r\n;\r\n\r\nRUN":142,"trun":143,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:";",35:"?",36:":",38:"{",39:"}",40:"tif",41:"(",42:")",47:"telif",48:"telse",49:"tswitch",53:"tcase",54:"tbreak",55:"tdefault",56:"twhile",57:"tdo",58:"tuntil",59:"tfor",63:"=",65:",",66:"id",67:"tprint",68:"tprintln",69:"+",70:"-",71:"*",72:"/",73:"^",74:"%",75:"<",76:">",77:"<=",78:">=",79:"==",80:"!=",81:"&&",82:"||",83:"!",86:"expreINT",87:"expreSTRING",88:"expreBOOL",89:"expreDOUBLE",90:"expreCHAR",91:"tint",92:"tdouble",93:"tstring",94:"tbool",95:"tchar",96:"++",97:"--",99:"tvoid",100:"treturn",102:"tcontinue",103:"[",104:"]",105:"tnew",108:"ttolower",109:"ttoupper",110:"tround",111:"tlength",112:"ttypeof",113:"ttostring",114:"ttochararray",115:".",116:"tpush",117:"tpop",118:"\r\n",119:"var",120:"nuevo",121:"new",122:"Nodo(\"LLAMADA",123:"FUNCION\",",124:"contador++);\r\n",125:"nuevo_id",126:"Nodo(\"ID",127:"contador++,",128:"$1);",129:"nuevo.addHijos(nuevo_id);\r\n",130:"nuevo.addHijos($3);\r\n",131:"$$",132:"nuevo;",133:"console.log(\"SE",134:"ENCONTRÓ",135:"UNA",136:"LISTA",137:"DE",138:"VALORES",139:"\");\r\n",140:"}\r\n\r\n",141:"|",142:"}\r\n\r\n;\r\n\r\nRUN",143:"trun"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[25,2],[26,1],[26,1],[26,1],[26,1],[26,2],[26,2],[27,1],[27,1],[27,1],[29,1],[29,1],[29,1],[31,1],[31,1],[31,1],[33,5],[37,3],[14,5],[14,6],[44,1],[44,1],[44,2],[46,5],[46,6],[45,2],[43,1],[43,2],[16,7],[50,2],[50,1],[50,1],[51,6],[51,7],[52,5],[17,5],[18,6],[19,6],[15,9],[15,9],[60,1],[60,1],[8,4],[8,4],[8,4],[8,2],[62,3],[62,1],[11,3],[11,3],[11,3],[12,4],[13,4],[34,3],[34,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,1],[34,1],[34,1],[34,1],[34,1],[85,1],[85,1],[85,1],[85,1],[85,1],[64,4],[61,1],[61,1],[61,1],[61,1],[61,1],[10,2],[10,2],[7,7],[7,6],[32,7],[32,6],[32,6],[32,5],[98,4],[98,2],[30,3],[28,2],[101,1],[101,1],[20,10],[20,15],[20,8],[20,10],[106,3],[106,1],[107,5],[107,3],[84,4],[84,7],[21,6],[21,9],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[24,6],[24,5],[23,525]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 45:
 
                                var nuevo = new Nodo("OP_TERNARIO", contador++);

                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN OPTERNARIO ");
                            
break;
case 49:
console.log("entro else")
break;
case 50:
console.log("Entro lista elif")
break;
case 51:
console.log("ENTRO ELIS Y ELSE")
break;
case 55: case 59: case 60:
this.$ = $$[$0]
break;
case 56:
this.$ = new Nodo("sin instrucciones", contador++);
break;
case 57:
 
                                var nuevo = new Nodo("SWITCH", contador++);

                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN DEFAULT");
    
break;
case 58:
 
                                var nuevo = new Nodo("CONTENIDO SWITCH", contador++);

                                nuevo.addHijos($$[$0-1]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ CONTENIDO SWITCH");
                            
break;
case 61:
 
                                var nuevo = new Nodo("CASE", contador++);

                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-2]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ ASE");
                            
break;
case 62:
 
                                var nuevo = new Nodo("LISTA CASE", contador++);

                                nuevo.addHijos($$[$0-6]);
                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-2]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN CASE");
                            
break;
case 63:
 
                                var nuevo = new Nodo("DEFAULT", contador++);

                                nuevo.addHijos($$[$0-2]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN DEFAULT");
                            
break;
case 64:
 
                                var nuevo = new Nodo("WHILE", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN DO WHILE ");
                            
break;
case 65:
 
                                var nuevo = new Nodo("DO WHILE", contador++);

                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN DO WHILE ");
                            
break;
case 66:
 
                                var nuevo = new Nodo("DO UNTIL", contador++);

                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN DOUNTIL ");
                            
break;
case 67: case 68:
 
                                var nuevo = new Nodo("FOR", contador++);

                                nuevo.addHijos($$[$0-6]);
                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN FOR ");
                            
break;
case 69: case 70: case 83: case 135:
this.$=$$[$0]
break;
case 71: case 72: case 73:
 
                                var nuevo = new Nodo("DECLARACION", contador++);

                                nuevo.addHijos($$[$0-3]);
                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA DECLARACION ");
                            
break;
case 74:
 
                                var nuevo = new Nodo("DECLARACION", contador++);

                                nuevo.addHijos($$[$0-1]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA DECLARACION ");
                            
break;
case 75:
 
                                var nuevo = new Nodo("LISTA ID", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0]);
                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos(nuevo1);

                                this.$ = nuevo;
                                console.log("se encontró un id");
                         
break;
case 76:
  
                                this.$ = new Nodo("ID", contador++, $$[$0]);
                                console.log("se encontró un id");
                        
break;
case 77: case 78: case 79:
 
                                var nuevo = new Nodo("ASIGNACION", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-2]);

                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA ASIGNACION ");
                            
break;
case 80:
 
                                var nuevo = new Nodo("PRINT", contador++);

                                var nuevo1 = new Nodo("print", contador++);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN PRINT ");
                            
break;
case 81:
 
                                var nuevo = new Nodo("PRINT", contador++);


                                var nuevo1 = new Nodo("println", contador++);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN PRINTLN ");
                            
break;
case 82:
this.$=$$[$0-1]
break;
case 84:
 
                                var nuevo = new Nodo("+", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA SUMA ");
                            
break;
case 85:
 
                                var nuevo = new Nodo("-", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA RESTA ");
                            
break;
case 86:
 
                                var nuevo = new Nodo("*", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA MULTIPLICACION ");
                            
break;
case 87:
 
                                var nuevo = new Nodo("/", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA DIVISION ");
                            
break;
case 88:
 
                                var nuevo = new Nodo("^", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA POTENCIA ");
                            
break;
case 89:
 
                                var nuevo = new Nodo("%", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 90:
 
                                var nuevo = new Nodo("-" + $$[$0] , contador++);
                                nuevo.addHijos($$[$0]);
                                this.$ = nuevo; 
                            
break;
case 91:
 
                                var nuevo = new Nodo("<", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                               // console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 92:
 
                                var nuevo = new Nodo(">", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                //console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 93:
 
                                var nuevo = new Nodo("<=", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                //console.log("SE ENCONTRÓ UN <= ");
                            
break;
case 94:
 
                                var nuevo = new Nodo(">=", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                //console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 95:
 
                                var nuevo = new Nodo("==", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                //console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 96:
 
                                var nuevo = new Nodo("!=", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                //console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 97:
 
                                var nuevo = new Nodo("&&", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                //console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 98:
 
                                var nuevo = new Nodo("||", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                //console.log("SE ENCONTRÓ UN MODULO ");
                            
break;
case 99:
 
                                var nuevo = new Nodo("!" + $$[$0] , contador++);
                                nuevo.addHijos($$[$0]);
                                this.$ = nuevo; 
                            
break;
case 100:
  console.log("se encontró un id");
                                this.$ = new Nodo("ID", contador++, $$[$0]); 
break;
case 101: case 102: case 103: case 104:
this.$ = $$[$0];
break;
case 105:
 this.$ = new Nodo("INT", contador ++, $$[$0]); console.log("SE ENCONTRÓ UN INT "); 
break;
case 106:
 this.$ = new Nodo("CADENA", contador ++, $$[$0]); console.log("SE ENCONTRÓ UNA CADENA"); 
break;
case 107:
 this.$ = new Nodo("BOOLEAN", contador ++, $$[$0]); console.log("SE ENCONTRÓ UN BOOLEAN "); 
break;
case 108:
 this.$ = new Nodo("DOUBLE", contador ++, $$[$0]); console.log("SE ENCONTRÓ UN DOUBLE "); 
break;
case 109:
 this.$ = new Nodo("CHAR", contador ++, $$[$0]); console.log("SE ENCONTRÓ UN CHAR "); 
break;
case 110:
 
                                var nuevo = new Nodo("CASTEO", contador++);

                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN CASTEO ");
                            
break;
case 111:
   console.log("se encontró un tipo");
                    this.$ = new Nodo("TIPO", contador++, "entero"); 
break;
case 112:
   console.log("se encontró un tipo");
                    this.$ = new Nodo("TIPO", contador++, "double"); 
break;
case 113:
   console.log("se encontró un tipo");
                    this.$ = new Nodo("TIPO", contador++, "cadena"); 
break;
case 114:
   console.log("se encontró un tipo");
                    this.$ = new Nodo("TIPO", contador++, "boolean"); 
break;
case 115:
   console.log("se encontró un tipo");
                    this.$ = new Nodo("TIPO", contador++, "caracter"); 
break;
case 116:
   console.log("se encontró un incremento");
                    this.$ = new Nodo("INCREMENTO", contador++, $$[$0-1] + "++"); 
break;
case 117:
   console.log("se encontró un decremento");
                    this.$ = new Nodo("DECREMENTO", contador++, $$[$0-1] + "--"); 
break;
case 124:
 
                                var nuevo = new Nodo("LISTA_PARAMETROS", contador++);
                                nuevo.addHijos($$[$0-3]);
                                nuevo.addHijos($$[$0-1]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA LISTA DE VALORES ");
                            
break;
case 125:
 
                                var nuevo = new Nodo("LISTA_PARAMETROS", contador++);
                                nuevo.addHijos($$[$0-1]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA LISTA_PARAMETROS");
                            
break;
case 126:
 
                                var nuevo = new Nodo("RETURN", contador++);
                                var nuevo1 = new Nodo("return", contador++);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN RETURN VALOR ");
                            
break;
case 127:
   this.$ = new Nodo("RETURN", contador++); 
                                console.log("SE ENCONTRÓ UN RETURN ");                            
                            
break;
case 128:

                                this.$ = new Nodo("BREAK", contador++); 
                                console.log("SE ENCONTRÓ UN BREAK ");
                            
break;
case 129:

                                this.$ = new Nodo("CONTINUE", contador++); 
                                console.log("SE ENCONTRÓ UN CONTINUE ");
                            
break;
case 130:
 
                                var nuevo = new Nodo("DECLARACION VECTOR", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-6]);
                                nuevo.addHijos($$[$0-9]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-3]);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA DECLARACION VECTOR ");
                            
break;
case 131:
 
                                var nuevo = new Nodo("DECLARACION VECTOR", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-9]);
                                nuevo.addHijos($$[$0-14]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-6]);
                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA DECLARACION VECTOR ");
                            
break;
case 132:
 
                                var nuevo = new Nodo("DECLARACION VECTOR", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-4]);
                                nuevo.addHijos($$[$0-7]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA DECLARACION VECTOR ");
                            
break;
case 133:
 

                                var nuevo = new Nodo("DECLARACION VECTOR", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-4]);

                                nuevo.addHijos($$[$0-9]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA DECLARACION VECTOR ");
                            
break;
case 134:
 
                                var nuevo = new Nodo("LISTA_VALORES_1", contador++);
                                nuevo.addHijos($$[$0-2]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA LISTA DE VALORES ");
                            
break;
case 136:
 
                                var nuevo = new Nodo("LISTA_VALORES_2", contador++);
                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA LISTA DE VALORES2 ");
                            
break;
case 137:
this.$=$$[$0-2]
break;
case 138:
                             
                                var nuevo = new Nodo("ACCESO_VECTOR", contador++);
                                
                                var nuevo1 = new Nodo("ID", contador++,$$[$0-3]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN ACCESO A VECTOR ");
                            
break;
case 139:
                             
                                var nuevo = new Nodo("ACCESO_VECTOR", contador++);
                                
                                var nuevo1 = new Nodo("ID", contador++,$$[$0-6]);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-4]);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UN ACCESO A VECTOR ");
                            
break;
case 140:
 
                                var nuevo = new Nodo("MODIFICACION VECTOR", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-5]);

                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-3]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA MODIFICACION VECTOR ");
                                
break;
case 141:
 
                                var nuevo = new Nodo("MODIFICACION VECTOR", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-8]);

                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-6]);
                                nuevo.addHijos($$[$0-3]);
                                nuevo.addHijos($$[$0]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA MODIFICACION VECTOR ");
                                
break;
case 142: case 143: case 144: case 145: case 146: case 147: case 148:
 
                                var nuevo = new Nodo("FUNCION NATIVA", contador++);
                                var nuevo1 = new Nodo($$[$0-3], contador++);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA funcion nativa ");
                            
break;
case 149:
 
                                var nuevo = new Nodo("FUNCION VECTOR", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-5]);
                                var nuevo2 = new Nodo("push", contador++);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos(nuevo2);
                                nuevo.addHijos($$[$0-1]);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA FUNCION VECTOR ");
                                
break;
case 150:
 
                                var nuevo = new Nodo("FUNCION VECTOR", contador++);
                                var nuevo1 = new Nodo("ID", contador++, $$[$0-4]);
                                var nuevo2 = new Nodo("pop", contador++);
                                nuevo.addHijos(nuevo1);
                                nuevo.addHijos(nuevo2);

                                this.$ = nuevo; 
                                console.log("SE ENCONTRÓ UNA FUNCION VECTOR ");
                                
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{1:[3]},{5:[1,42],6:43,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($Vk,[2,3]),o($Vk,[2,4]),{9:[1,44]},{9:[1,45]},{9:[1,46]},{9:[1,47]},{9:[1,48]},o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),{9:[1,49]},{9:[1,50]},{9:[1,51]},{9:[1,52]},{9:[1,53]},{9:[1,54]},{9:[1,55]},{41:[1,56],63:$Vl,96:$Vm,97:$Vn,103:[1,60],115:[1,61]},{62:62,66:$Vo,103:[1,63]},{41:[1,65]},{41:[1,66]},{41:[1,67]},{41:[1,68]},{41:[1,69]},{41:[1,70]},{37:71,38:$Vp},{41:[1,73]},{41:[1,74]},{41:[1,75]},{41:[1,76]},{41:[1,77]},{41:[1,78]},{41:[1,79]},o($Vq,[2,111]),o($Vq,[2,112]),o($Vq,[2,113]),o($Vq,[2,114]),o($Vq,[2,115]),{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),{10:86,22:92,23:90,34:84,41:$Vr,42:[1,81],61:83,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,98:80,106:82,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($VA,[2,116]),o($VA,[2,117]),{10:86,22:92,23:90,33:101,34:99,41:$VB,64:100,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:103,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{116:[1,104],117:[1,105]},{9:[2,74],63:[1,106],65:[1,107]},{104:[1,108]},o($VC,[2,76]),{10:86,22:92,23:90,34:109,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:110,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:111,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{8:112,11:113,61:114,66:[1,115],91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc},{10:86,22:92,23:90,34:116,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:117,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{56:[1,118],58:[1,119]},{4:120,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:121,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:122,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:123,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:124,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:125,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:126,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:127,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,128],65:[1,129]},{36:[1,130]},{42:[1,131],65:$VD},{10:86,22:92,23:90,34:133,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($VE,[2,135],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS}),{10:86,22:92,23:90,34:148,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($VA,[2,83]),{10:86,22:92,23:90,34:149,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:150,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($VA,[2,100],{41:[1,151],96:$Vm,97:$Vn,103:[1,152]}),o($VA,[2,101]),o($VA,[2,102]),o($VA,[2,103]),o($VA,[2,104]),o($VA,[2,105]),o($VA,[2,106]),o($VA,[2,107]),o($VA,[2,108]),o($VA,[2,109]),o($VT,[2,77],{35:$VU,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS}),o($VT,[2,78]),o($VT,[2,79]),{10:86,22:92,23:90,34:148,41:$Vr,61:154,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,104:[1,155]},{41:[1,156]},{41:[1,157]},{10:86,22:92,23:90,33:160,34:158,41:$VB,64:159,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{66:[1,161]},{66:[1,162],103:[1,163]},{42:[1,164],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,165],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,166],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{9:[1,167]},{9:[1,168]},{62:62,66:$Vo},{63:$Vl},{42:[1,169],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,170],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{41:[1,171]},{41:[1,172]},{6:43,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,39:[1,173],40:$V0,49:$V1,56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,174],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,175],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,176],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,177],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,178],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,179],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,180],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{36:[1,181]},{61:182,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc},{61:183,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc},{38:[1,184]},{10:86,22:92,23:90,34:185,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($VV,[2,125],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS}),{10:86,22:92,23:90,34:186,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:187,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:188,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:189,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:190,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:191,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:192,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:193,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:194,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:195,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:196,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:197,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:198,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:199,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,200],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},o($VW,[2,90],{71:$VH,72:$VI,73:$VJ,74:$VK}),o($VX,[2,99],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),{10:86,22:92,23:90,34:84,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,106:82,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:201,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:202,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,203]},{63:[1,204],103:[1,205]},{10:86,22:92,23:90,34:206,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,207]},{9:[2,71],35:$VU,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{9:[2,72]},{9:[2,73]},o($VC,[2,75]),{63:[1,208]},{104:[1,209]},{9:[2,80]},{9:[2,81]},{37:211,38:$VY,43:210},{10:86,22:92,23:90,34:213,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:214,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{38:[1,215]},{37:216,38:$Vp},{10:86,22:92,23:90,34:217,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:218,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o([5,39,40,47,48,49,54,56,57,58,59,66,67,68,91,92,93,94,95,108,109,110,111,112,113,114],[2,46]),o($VA,[2,142]),o($VA,[2,143]),o($VA,[2,144]),o($VA,[2,145]),o($VA,[2,146]),o($VA,[2,147]),o($VA,[2,148]),{61:219,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc},{10:86,22:92,23:90,34:220,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{37:211,38:$VY,43:221},{118:[1,222]},o($VE,[2,134],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS}),o($VW,[2,84],{71:$VH,72:$VI,73:$VJ,74:$VK}),o($VW,[2,85],{71:$VH,72:$VI,73:$VJ,74:$VK}),o($VZ,[2,86],{73:$VJ}),o($VZ,[2,87],{73:$VJ}),o($VA,[2,88]),o($VZ,[2,89],{73:$VJ}),o($V_,[2,91],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,92],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,93],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,94],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,95],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($V_,[2,96],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK}),o($VX,[2,97],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o([9,35,36,39,42,65,82,104],[2,98],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR}),o($VA,[2,82]),{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,104:[1,223]},{36:[1,224],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{10:86,22:92,23:90,34:225,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:226,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:227,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,228],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{9:[2,150]},{38:[1,230],105:[1,229]},{66:[1,231]},o($Vk,[2,47],{44:232,45:233,46:234,47:[1,236],48:$V$}),o($V01,[2,55]),{4:120,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,39:[1,237],40:$V0,49:$V1,56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{9:[1,238],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{9:[1,239],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{50:240,51:241,52:242,53:[1,243],55:$V11},o($Vk,[2,64]),{42:[1,245],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{42:[1,246],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{37:211,38:$VY,43:247},o($VV,[2,124],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS}),o($Vk,[2,119]),o($VA,[2,151]),o($VA,[2,138],{103:[1,248]}),{10:86,22:92,23:90,34:249,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($VT,[2,110],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS}),{9:[2,140],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,104:[1,250]},{9:[2,149]},{61:251,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc},{10:86,22:92,23:90,34:84,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,106:252,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{63:[1,253]},o($Vk,[2,48]),o($Vk,[2,49]),o($Vk,[2,50],{45:254,47:[1,255],48:$V$}),{37:211,38:$VY,43:256},{41:[1,257]},o($V01,[2,56]),{10:259,11:260,60:258,66:$V21},{10:259,11:260,60:262,66:$V21},{39:[1,263]},{39:[2,59],52:264,53:[1,265],55:$V11},{39:[2,60]},{10:86,22:92,23:90,34:266,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{36:[1,267]},{9:[2,65]},{9:[2,66]},o($Vk,[2,118]),{10:86,22:92,23:90,34:268,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($VT,[2,45],{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS}),{63:[1,269]},{103:[1,270]},{39:[1,271],65:$VD},{38:[1,273],105:[1,272]},o($Vk,[2,51]),{41:[1,274]},o($Vk,[2,54]),{10:86,22:92,23:90,34:275,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,276]},{42:[2,69]},{42:[2,70]},{63:$Vl,96:$Vm,97:$Vn},{42:[1,277]},o($Vk,[2,57]),{39:[2,58]},{10:86,22:92,23:90,34:278,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{36:[1,279],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{4:280,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,104:[1,281]},{10:86,22:92,23:90,34:282,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{10:86,22:92,23:90,34:283,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{9:[2,132]},{61:284,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc},{38:[1,286],107:285},{10:86,22:92,23:90,34:287,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,288],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{37:211,38:$VY,43:289},{37:211,38:$VY,43:290},{36:[1,291],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{4:292,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{6:43,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,54:[1,293],56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($VA,[2,139]),{9:[2,141],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,104:[1,294]},{103:[1,295]},{39:[1,296],65:[1,297]},{10:86,22:92,23:90,34:84,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,106:298,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{42:[1,299],69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS},{37:211,38:$VY,43:300},o($Vk,[2,67]),o($Vk,[2,68]),{4:301,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{6:43,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,54:[1,302],56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{9:[1,303]},{9:[2,130]},{10:86,22:92,23:90,34:304,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{9:[2,133]},{38:[1,305]},{39:[1,306],65:$VD},{37:211,38:$VY,43:307},o($V01,[2,52]),{6:43,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,40:$V0,49:$V1,54:[1,308],56:$V2,57:$V3,59:$V4,61:22,66:$V5,67:$V6,68:$V7,91:$V8,92:$V9,93:$Va,94:$Vb,95:$Vc,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},{9:[1,309]},{39:[2,63]},{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,104:[1,310]},{10:86,22:92,23:90,34:84,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,106:311,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($V31,[2,137]),o($V01,[2,53]),{9:[1,312]},o($V41,[2,61]),{103:[1,313]},{39:[1,314],65:$VD},o($V41,[2,62]),{10:86,22:92,23:90,34:315,41:$Vr,66:$Vs,70:$Vt,83:$Vu,84:91,85:93,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,108:$Vd,109:$Ve,110:$Vf,111:$Vg,112:$Vh,113:$Vi,114:$Vj},o($V31,[2,136]),{69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,104:[1,316]},{9:[2,131]}],
defaultActions: {42:[2,1],159:[2,72],160:[2,73],164:[2,80],165:[2,81],207:[2,150],228:[2,149],242:[2,60],245:[2,65],246:[2,66],259:[2,69],260:[2,70],264:[2,58],271:[2,132],294:[2,130],296:[2,133],303:[2,63],316:[2,131]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // acá vamos a importar todas las clases que necesitemos
    // require es como un import, cada punto antes de la ruta es un directorio hacia atrás del actual, qu sería src
    
    //acá usamos el punto antes de la ruta para buicarnos seguún el directorio
    //const {Declaracion} = require('../instruccion/declaracion');
    //const {Declaracion_2} = require('../instruccion/declaracion_2');
    //const {Type} = require('../symbol/type');
    //const {Arithmetic} = require('../expression/aritmeticas');
    //const {ArithmeticOption} = require('../expression/aritmeticOption');
    //const {Literal} = require('../expression/literal');
    //const {PrintEnv} = require('../instruccion/printEnv');
    //const {Asignacion} = require('../instruccion/asignacion');
    //const {Print} = require('../instruccion/print');
    //const {If} = require('../instruccion/condicionif');
    //const {For} = require('../instruccion/for');
    //const {Relacional} = require('../expression/relacional');
    //const {RelacionalOption} = require('../expression/relacionalOption');
   // const {Logico} = require('../expression/logico');
    //const {LogicoOption} = require('../expression/logicoOptions');
    //const {Casteo} = require('../expression/casteo');
    //const {Buscador} = require('../expression/buscador');
    //const {C_if} = require('../objetos/condiciones_if');
    //const {Statement} = require('../instruccion/Statement');

    const {Nodo} = require('./nodo');
    var contador = 0;

    // const {el nombre con el que lo vamos a usar acá}  = require('ruta');

    //var ides = [];
    //var condiciones_if = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: console.log("Se encontró el token <if> con valor: "+ yy_.yytext );  return 40
break;
case 4: console.log("Se encontró el token <else> con valor: "+ yy_.yytext ); return 48
break;
case 5: console.log("Se encontró el token <elif> con valor: "+ yy_.yytext ); return 47
break;
case 6: console.log("Se encontró el token <switch> con valor: "+ yy_.yytext ); return 49
break;
case 7: console.log("Se encontró el token <case> con valor: "+ yy_.yytext ); return 53
break;
case 8: console.log("Se encontró el token <for> con valor: "+ yy_.yytext ); return 59
break;
case 9: console.log("Se encontró el token <do> con valor: "+ yy_.yytext ); return 57
break;
case 10: console.log("Se encontró el token <void> con valor: "+ yy_.yytext ); return 99
break;
case 11: console.log("Se encontró el token <while> con valor: "+ yy_.yytext ); return 56
break;
case 12: console.log("Se encontró el token <default> con valor: "+ yy_.yytext ); return 55
break;
case 13: console.log("Se encontró el token <until> con valor: "+ yy_.yytext ); return 58
break;
case 14: console.log("Se encontró el token <break> con valor: "+ yy_.yytext ); return 54
break;
case 15: console.log("Se encontró el token <continue> con valor: "+ yy_.yytext ); return 102
break;
case 16: console.log("Se encontró el token <return> con valor: "+ yy_.yytext ); return 100
break;
case 17: console.log("Se encontró el token <println> con valor: "+ yy_.yytext ); return 68
break;
case 18: console.log("Se encontró el token <print> con valor: "+ yy_.yytext ); return 67
break;
case 19: console.log("Se encontró el token <tolower> con valor: "+ yy_.yytext ); return 108
break;
case 20: console.log("Se encontró el token <toupper> con valor: "+ yy_.yytext ); return 109
break;
case 21: console.log("Se encontró el token <round> con valor: "+ yy_.yytext ); return 110
break;
case 22: console.log("Se encontró el token <length> con valor: "+ yy_.yytext ); return 111
break;
case 23: console.log("Se encontró el token <typeof> con valor: "+ yy_.yytext ); return 112
break;
case 24: console.log("Se encontró el token <tostring> con valor: "+ yy_.yytext ); return 113
break;
case 25: console.log("Se encontró el token <tochar array> con valor: "+ yy_.yytext ); return 114
break;
case 26: console.log("Se encontró el token <push> con valor: "+ yy_.yytext ); return 116
break;
case 27: console.log("Se encontró el token <pop> con valor: "+ yy_.yytext ); return 117
break;
case 28: console.log("Se encontró el token <run> con valor: "+ yy_.yytext ); return 143
break;
case 29: console.log("Se encontró el token <new> con valor: "+ yy_.yytext ); return 105
break;
case 30: console.log("Se encontró el token <int> con valor: "+ yy_.yytext ); return 91
break;
case 31: console.log("Se encontró el token <double> con valor: "+ yy_.yytext ); return 92
break;
case 32: console.log("Se encontró el token <string> con valor: "+ yy_.yytext ); return 93
break;
case 33: console.log("Se encontró el token <boolean> con valor: "+ yy_.yytext ); return 94
break;
case 34: console.log("Se encontró el token <char> con valor: "+ yy_.yytext ); return 95
break;
case 35: console.log("Se encontró el token >= con valor: "+ yy_.yytext ); return 78
break;
case 36: console.log("Se encontró el token <= con valor: "+ yy_.yytext ); return 77
break;
case 37: console.log("Se encontró el token > con valor: "+ yy_.yytext ); return 76
break;
case 38: console.log("Se encontró el token < con valor: "+ yy_.yytext ); return 75
break;
case 39: console.log("Se encontró el token <==> con valor: "+ yy_.yytext ); return 79
break;
case 40: console.log("Se encontró el token <!=> con valor: "+ yy_.yytext ); return 80
break;
case 41: console.log("Se encontró el token <!> con valor: "+ yy_.yytext ); return 83
break;
case 42: console.log("Se encontró el token <&&> con valor: "+ yy_.yytext ); return 81
break;
case 43: console.log("Se encontró el token <||> con valor: "+ yy_.yytext ); return 82
break;
case 44: console.log("Se encontró el token <++> con valor: "+ yy_.yytext ); return 96
break;
case 45: console.log("Se encontró el token <--> con valor: "+ yy_.yytext ); return 97
break;
case 46: console.log("Se encontró el token <+> con valor: "+ yy_.yytext ); return 69
break;
case 47: console.log("Se encontró el token <-> con valor: "+ yy_.yytext ); return 70
break;
case 48: console.log("Se encontró el token <*> con valor: "+ yy_.yytext ); return 71
break;
case 49: console.log("Se encontró el token </> con valor: "+ yy_.yytext ); return 72
break;
case 50: console.log("Se encontró el token <^> con valor: "+ yy_.yytext ); return 73
break;
case 51: console.log("Se encontró el token <%> con valor: "+ yy_.yytext ); return 74
break;
case 52: console.log("Se encontró el token <,> con valor: "+ yy_.yytext ); return 65
break;
case 53: console.log("Se encontró el token <;> con valor: "+ yy_.yytext ); return 9
break;
case 54: console.log("Se encontró el token <:> con valor: "+ yy_.yytext ); return 36
break;
case 55: console.log("Se encontró el token <=> con valor: "+ yy_.yytext ); return 63
break;
case 56: console.log("Se encontró el token <(> con valor: "+ yy_.yytext ); return 41
break;
case 57: console.log("Se encontró el token <)> con valor: "+ yy_.yytext ); return 42
break;
case 58: console.log("Se encontró el token <{> con valor: "+ yy_.yytext ); return 38
break;
case 59: console.log("Se encontró el token <}> con valor: "+ yy_.yytext ); return 39
break;
case 60: console.log("Se encontró el token <[]> con valor: "+ yy_.yytext ); return 103
break;
case 61: console.log("Se encontró el token <]> con valor: "+ yy_.yytext ); return 104
break;
case 62: console.log("Se encontró el token <.> con valor: "+ yy_.yytext ); return 115
break;
case 63: console.log("Se encontró el token <?> con valor: "+ yy_.yytext ); return 35
break;
case 64: console.log("Se encontró el token <id> con valor: "+ yy_.yytext ); return 66 
break;
case 65: console.log("Se encontró el token <double> con valor: "+ yy_.yytext ); return 89 
break;
case 66: console.log("Se encontró el token <int> con valor: "+ yy_.yytext ); return 86 
break;
case 67: console.log("Se encontró el token <bool> con valor: "+ yy_.yytext ); return 88 
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); console.log("Se encontró el token <char> con valor: "+ yy_.yytext ); return 90
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); console.log("Se encontró el token <string> con valor: "+ yy_.yytext ); return 87
break;
case 70:return 5
break;
case 71: 
        console.log("error lexico")
             // reporte para el usuario dónde está el error y por qué fue
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:default\b)/i,/^(?:until\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:((([a-zA-Z])|_)(([a-zA-Z])|_|([0-9]))*))/i,/^(?:((([0-9])+)\.(([0-9])+)))/i,/^(?:(([0-9])+))/i,/^(?:(true|false\b))/i,/^(?:('([^\']|\\|\\n|\\t|\\r|\\|\\')'))/i,/^(?:("[^\"]*"|“[^\"]*”))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}