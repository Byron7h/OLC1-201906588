package analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;



parser code

  

{:
    public static nodo padre;
    public int contador = 0;

    public static String cache = "";
    String lista_iid = "";

    
    // listas que nos van a servir
    public static LinkedList<TError> errores = new LinkedList<TError>();
    

    // esta función nata de la herramienta, manda a llamar todos los errores sintacticos
    // necesita un objeto simbolo
   
    public void syntax_error(Symbol s)
    {        

        //obtenemos los valores de los parámetros del objeto s
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
      
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        // error de tipo sintáctico
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
        
    }


    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores, se reporta y termina el análisis
    // en caso de que se pueda recurer este no saldrá
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema, "Caracter no esperado",fila,columna);
        errores.add(tmp);   
    }
:}







terminal suma;
terminal resta;
terminal mult;
terminal div;
terminal pot;
terminal mod;
terminal pare1;
terminal pare2;
terminal cor1;
terminal cor2;
terminal asignacion;
terminal pyc;
terminal coma;
terminal duda1;
terminal duda2;

terminal pr_verdadero;
terminal pr_falso;
terminal pr_ingresar;
terminal pr_como;
terminal pr_con_valor;
terminal pr_si;
terminal pr_entonces;
terminal pr_fin_si;
terminal pr_de_lo_contrario;
terminal pr_segun;
terminal pr_hacer;
terminal pr_fin_segun;
terminal pr_para;
terminal pr_hasta;
terminal pr_fin_para;
terminal pr_mientras;
terminal pr_fin_mientras;
terminal pr_repetir;
terminal pr_hasta_que;
terminal pr_retornar;
terminal pr_metodo;
terminal pr_fin_metodo;
terminal pr_con_parametros;
terminal pr_funcion;
terminal pr_fin_funcion;
terminal pr_ejecutar;
terminal pr_imprimir;
terminal pr_imprimir_nl;
terminal pr_or;
terminal pr_and;
terminal pr_not;
terminal pr_mayor;
terminal pr_menor;
terminal pr_mayor_o_igual;
terminal pr_menor_o_igual;
terminal pr_es_igual;
terminal pr_es_diferente;
terminal String pr_inicio;
terminal String pr_fin;
terminal pr_con_incremental;
terminal pr_o_si;


terminal td_cadena;
terminal td_numero;
terminal td_boolean;
terminal td_caracter;

terminal String num;
terminal String id;
terminal String cadena;
terminal String caracter;

non terminal INICIO, GLOBALES, GLOBAL, INSTRUCCIONES; 
non terminal DECLARACION, EXPRE, VALOR, TIPO, LISTA_ID, LISTA_PARAMETROS;
non terminal PRINT, RETORNO, EJECUCION, METODO, FUNCION, RAMIFICACION;
non terminal SEGUN, LISTA_SEGUN, MIENTRAS, REPETIR, SI, INSTRUCCION_R;
non terminal INSTRUCCIONES_R, PARA, GLO, INSTRUCCION, ASIGNACION_;

precedence left pr_or;
precedence left pr_and;
precedence left pr_not;
precedence left pr_mayor, pr_menor, pr_mayor_o_igual, pr_menor_o_igual, pr_es_igual, pr_es_diferente;
precedence left suma, resta;
precedence left mult, div, mod;
precedence left pot;

start with INICIO;

INICIO  ::= pr_inicio GLOBALES:b pr_fin  {: nodo nuevo = new nodo("INICIO", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("inicio", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("fin", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo2);

                                            parser.padre = nuevo;
                                            RESULT = nuevo;
                                            :}
 ;  
GLOBALES ::=    GLOBALES:a GLO:b         {: nodo nuevo = new nodo("GLOBALES", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}

                |GLO:a                   {: nodo nuevo = new nodo("GLOBALES", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                         :}

;
GLO ::= GLOBAL:a {: nodo nuevo = new nodo("GLO", parser.contador);
                    parser.contador ++;
                    nuevo.AddHijos((nodo) a);
                    RESULT = nuevo;
                :}
                           


        |INSTRUCCION:a  {: nodo nuevo = new nodo("GLO", parser.contador);
                        parser.contador ++;
                        nuevo.AddHijos((nodo) a);
                        RESULT = nuevo;
                        :}
;

GLOBAL ::=   METODO:a   {: nodo nuevo = new nodo("GLOBAL", parser.contador);
                        parser.contador ++;
                        nuevo.AddHijos((nodo) a);
                        RESULT = nuevo;
                        :}

           | FUNCION:a {: nodo nuevo = new nodo("GLOBAL", parser.contador);
                        parser.contador ++;
                        nuevo.AddHijos((nodo) a);
                        RESULT = nuevo;
                        :}

;

INSTRUCCIONES ::=   INSTRUCCIONES:a INSTRUCCION:b {: nodo nuevo = new nodo("INSTRUCCIONES", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}




                |   INSTRUCCION:a       {:  nodo nuevo = new nodo("INSTRUCCIONES", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                        :}
;

INSTRUCCIONES_R ::=     INSTRUCCIONES_R:a INSTRUCCION_R:b {: 
                                            nodo nuevo = new nodo("INSTRUCCIONES_R", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

                    |   INSTRUCCION_R:a {:  nodo nuevo = new nodo("INSTRUCCIONES_R", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                        :}
;

// instrucciones 
    INSTRUCCION_R   ::= ASIGNACION_:a pyc       {: nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :} 

                |   DECLARACION:a pyc       {: nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :} 

                |   PRINT:a pyc             {: nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :} 

                |   RETORNO:a pyc           {: nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :} 

                |   EJECUCION:a pyc         {: nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :} 

                |   SI:a                {:  nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                        :}

                |   SEGUN:a            {:   nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                        :}

                |   PARA:a            {:    nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                        :} 

                |   MIENTRAS:a            {: 
                                            nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                        :}

                |   REPETIR:a            {: 
                                            nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                        :}

                |   error             {: 
                                            nodo nuevo = new nodo("INSTRUCCION_R", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("error", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            RESULT = nuevo;
                                        :}
;

INSTRUCCION   ::=   ASIGNACION_:a pyc       {: nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :} 

                |   DECLARACION:a pyc       {: nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :} 

                |   PRINT:a pyc             {: nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :}

                |   EJECUCION:a pyc         {: nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(";", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);

                                            RESULT = nuevo;
                                            :}

                |   SI:a            {:      nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                            
                                        :}

                |   SEGUN:a            {: 
                                            nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                            
                                        :}

                |   PARA:a            {: 
                                            nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                            
                                        :} 

                |   MIENTRAS:a            {: 
                                            nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                            
                                        :}

                |   REPETIR:a            {: 
                                            nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            RESULT = nuevo;
                                            
                                        :}

                |   error:a            {: 
                                            nodo nuevo = new nodo("INSTRUCCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("error", parser.contador);
                                            parser.contador ++;
                                            nuevo.AddHijos(nuevo1);
                                            RESULT = nuevo;
                                            
                                        :}
;
                

DECLARACION   ::=   pr_ingresar LISTA_ID:a pr_como TIPO:b pr_con_valor EXPRE:c  {: 
                                            nodo nuevo = new nodo("DECLARACION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("ingresar", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("como", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("con_valor", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) c);

                                            RESULT = nuevo;
                                            :}
;

ASIGNACION_   ::=   LISTA_ID:a asignacion EXPRE:b {: 
                                            nodo nuevo = new nodo("ASIGNACION_", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("-\\>", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}
;


EXPRE   ::=  pare1 EXPRE:a pare2 {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("(", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo(")", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);

                                            RESULT = nuevo;
                                            :}

            |EXPRE:a suma EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("+", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}
 
            |EXPRE:a resta EXPRE:b{: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("-", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}
 
            |EXPRE:a mult EXPRE:b{: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("*", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}
  
            |EXPRE:a div EXPRE:b{: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("/", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}
  
            |EXPRE:a pot cor1 EXPRE:b cor2 {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("potencia", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("[", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("]", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);

                                            RESULT = nuevo;
                                            :} 
            |EXPRE:a mod EXPRE:b{: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("mod", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            |EXPRE:a pr_or EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("or", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            |EXPRE:a pr_and EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("and", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            |pr_not EXPRE:a {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("not", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);

                                            RESULT = nuevo;
                                            :} 


            |EXPRE:a  pr_mayor EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("mayor", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            |EXPRE:a  pr_menor EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("menor", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            |EXPRE:a  pr_mayor_o_igual EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("mayor_o_igual", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            |EXPRE:a  pr_menor_o_igual EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("menor_o_igual", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            |EXPRE:a  pr_es_igual EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("es_igual", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            |EXPRE:a  pr_es_diferente EXPRE:b {: 
                                            nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("es_diferente", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :} 

            | VALOR:a {:                    nodo nuevo = new nodo("EXPRE", parser.contador);
                                            parser.contador ++;
                                            nuevo.AddHijos((nodo) a);

                                            RESULT = nuevo;
                                            :}
;

VALOR ::=   num:a {:            nodo nuevo = new nodo("VALOR", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo(""+a, parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :} 

            | id:a {:           nodo nuevo = new nodo("VALOR", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo("id: "+a, parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :} 

            | cadena:a {:       nodo nuevo = new nodo("VALOR", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo(a, parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);
                                nuevo1.cadena = true;

                                RESULT = nuevo;
                                :} 

            | pr_verdadero:a {: 
                                nodo nuevo = new nodo("VALOR", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo("verdadero", parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :} 

            | pr_falso:a {:     nodo nuevo = new nodo("VALOR", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo("falso", parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :} 

            | caracter:a {:     nodo nuevo = new nodo("VALOR", parser.contador);
                                parser.contador ++;

                                String cade = a;
                                boolean s = cade.contains("$");
                                if(s){
                                    cade = cade.replace("{", "(");
                                    cade = cade.replace("}", ")");
                                }


                                nodo nuevo1 = new nodo(cade, parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :} 

;

TIPO ::=    td_cadena   {:      nodo nuevo = new nodo("TIPO", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo("cadena", parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :}
 
            | td_numero{:       nodo nuevo = new nodo("TIPO", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo("numero", parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :} 

            | td_boolean{:      nodo nuevo = new nodo("TIPO", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo("boolean", parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :} 

            | td_caracter{:      nodo nuevo = new nodo("TIPO", parser.contador);
                                parser.contador ++;
                                nodo nuevo1 = new nodo("caracter", parser.contador);
                                parser.contador ++;

                                nuevo.AddHijos(nuevo1);

                                RESULT = nuevo;
                                :}    
;

LISTA_ID ::=  LISTA_ID:a coma id:b {:       nodo nuevo = new nodo("LISTA_ID", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(",", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("id: "+b, parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo2);

                                            RESULT = nuevo;

                                            :} 

            | id:a                       {: nodo nuevo = new nodo("LISTA_ID", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("id: "+a, parser.contador);
                                            parser.contador ++;
                                            nuevo.AddHijos(nuevo2);

                                            RESULT = nuevo;
                                            :} 
;

LISTA_PARAMETROS ::= LISTA_PARAMETROS:a coma EXPRE:b TIPO:c {:       
                                            nodo nuevo = new nodo("LISTA_PARAMETROS", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo(",", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos((nodo) c);

                                            RESULT = nuevo;

                                            :}

            | EXPRE:a TIPO:b {:       
                                            nodo nuevo = new nodo("LISTA_PARAMETROS", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;

                                            :}

            | pare1 LISTA_PARAMETROS:a pare2 {: 
                                            nodo nuevo = new nodo("LISTA_PARAMETROS", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("(", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo(")", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);

                                            RESULT = nuevo;
                                            :}

;

PRINT ::=   pr_imprimir EXPRE:a {: 
                                            nodo nuevo = new nodo("PRINT", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("imprimir", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);

                                            RESULT = nuevo;
                                            :}
        |   pr_imprimir_nl EXPRE:a {: 
                                            nodo nuevo = new nodo("PRINT", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("imprimir_nl", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);

                                            RESULT = nuevo;
                                            :}
;

RETORNO ::= pr_retornar EXPRE:a {: 
                                            nodo nuevo = new nodo("RETORNO", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("retornar", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);

                                            RESULT = nuevo;
                                            :}
;

EJECUCION ::= pr_ejecutar id:a pare1 pare2 {: 
                                            nodo nuevo = new nodo("EJECUCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("ejecutar", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("id = "+a, parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("(", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo(")", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos(nuevo4);

                                            RESULT = nuevo;
                                            :}

            | pr_ejecutar id:a LISTA_PARAMETROS:b {: 

                                            nodo nuevo = new nodo("EJECUCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("ejecutar", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("id = "+a, parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}
;

METODO ::=  pr_metodo id:a INSTRUCCIONES:b pr_fin_metodo{: 
                                            nodo nuevo = new nodo("METODO", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("metodo", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("id = "+a, parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("fin_metodo", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);

                                            RESULT = nuevo;
                                            :}

            | pr_metodo id:a pr_con_parametros LISTA_PARAMETROS:b INSTRUCCIONES:c pr_fin_metodo{: 
                                            nodo nuevo = new nodo("METODO", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("metodo", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("id = "+a, parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("con_parametros", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("fin_metodo", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo4);

                                            RESULT = nuevo;
                                            :}
;

FUNCION ::= pr_funcion id:a TIPO:b INSTRUCCIONES_R:c pr_fin_funcion {: 
                                            nodo nuevo = new nodo("FUNCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("funcion", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("id = "+a, parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("fin_funcion", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo3);

                                            RESULT = nuevo;
                                            :}

            | pr_funcion id:a TIPO:b pr_con_parametros LISTA_PARAMETROS:c INSTRUCCIONES_R:d pr_fin_funcion {: 
                                            nodo nuevo = new nodo("FUNCION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("funcion", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("con_parametros", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("id = "+a, parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("fin_funcion", parser.contador);
                                            parser.contador ++;


                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos((nodo) d);
                                            nuevo.AddHijos(nuevo4);
       

                                            RESULT = nuevo;
                                            :}
;

SI ::=        pr_si EXPRE:a pr_entonces INSTRUCCIONES:b pr_fin_si{: 
                                            nodo nuevo = new nodo("SI", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("si", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("entonces", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("fin_si", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
       
                                            RESULT = nuevo;
                                            :}

            | pr_si EXPRE:a pr_entonces INSTRUCCIONES:b pr_de_lo_contrario INSTRUCCIONES:c pr_fin_si {: 
                                            nodo nuevo = new nodo("SI", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("si", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("entonces", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("de_lo_contrario", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("fin_si", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo4);
       
                                            RESULT = nuevo;
                                            :}

            | pr_si EXPRE:a pr_entonces INSTRUCCIONES:b RAMIFICACION:c  pr_fin_si{: 
                                            nodo nuevo = new nodo("SI", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("si", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("entonces", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("fin_si", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo3);
       
                                            RESULT = nuevo;
                                            :}

            | pr_si EXPRE:a pr_entonces INSTRUCCIONES:b RAMIFICACION:c  pr_de_lo_contrario INSTRUCCIONES:d pr_fin_si{: 
                                            nodo nuevo = new nodo("SI", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("si", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("entonces", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("de_lo_contrario", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("fin_si", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) d);
                                            nuevo.AddHijos(nuevo4);
       
                                            RESULT = nuevo;
                                            :}
;

RAMIFICACION ::= RAMIFICACION:a pr_o_si EXPRE:b pr_entonces INSTRUCCIONES:c {: 
                                            nodo nuevo = new nodo("RAMIFICACION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("o_si", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("entonces", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) c);
       
                                            RESULT = nuevo;
                                            :}

                |pr_o_si EXPRE:a pr_entonces INSTRUCCIONES:b {: 
                                            nodo nuevo = new nodo("RAMIFICACION", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("o_si", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("entonces", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
       
                                            RESULT = nuevo;
                                            :}
;

SEGUN ::=   pr_segun EXPRE:a pr_hacer LISTA_SEGUN:b pr_fin_segun {: 
                                            nodo nuevo = new nodo("SEGUN", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("segun", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("hacer", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("fin_segun", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
       
                                            RESULT = nuevo;
                                            :}

            | pr_segun EXPRE:a pr_hacer LISTA_SEGUN:b pr_de_lo_contrario pr_entonces INSTRUCCIONES:c pr_fin_segun {: 
                                            nodo nuevo = new nodo("SEGUN", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("segun", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("hacer", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("de_lo_contrario", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("entonces", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo5 = new nodo("fin_segun", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos(nuevo4);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo5);
       
                                            RESULT = nuevo;
                                            :}
;

LISTA_SEGUN ::= LISTA_SEGUN:a duda1 EXPRE:b duda2 pr_entonces INSTRUCCIONES:c {: 
                                            nodo nuevo = new nodo("LISTA_SEGUN", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("¿", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("?", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("entonces", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) c);
       
                                            RESULT = nuevo;
                                            :}


            |   duda1 EXPRE:a duda2 pr_entonces INSTRUCCIONES:b {: 
                                            nodo nuevo = new nodo("LISTA_SEGUN", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("¿", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("?", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("entonces", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) b);
       
                                            RESULT = nuevo;
                                            :}
;

PARA ::=     pr_para EXPRE:a asignacion EXPRE:b pr_hasta EXPRE:c pr_hacer INSTRUCCIONES:d pr_fin_para {: 
                                            nodo nuevo = new nodo("PARA", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("para", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("asignacion", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("hasta", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("hacer", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo5 = new nodo("fin_para", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo4);
                                            nuevo.AddHijos((nodo) d);
                                            nuevo.AddHijos(nuevo5);
       
                                            RESULT = nuevo;
                                            :}

            |pr_para EXPRE:a asignacion EXPRE:b pr_hasta EXPRE:c pr_hacer pr_fin_para {: 
                                            nodo nuevo = new nodo("PARA", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("para", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("asignacion", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("hasta", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("hacer", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo5 = new nodo("fin_para", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo4);
                                            nuevo.AddHijos(nuevo5);
       
                                            RESULT = nuevo;
                                            :}


            |pr_para EXPRE:a asignacion EXPRE:b pr_hasta EXPRE:c pr_con_incremental EXPRE:d pr_hacer INSTRUCCIONES:f pr_fin_para {: 
                                            nodo nuevo = new nodo("PARA", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("para", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("asignacion", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("hasta", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("con_incremental", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo5 = new nodo("hacer", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo6 = new nodo("fin_para", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo4);
                                            nuevo.AddHijos((nodo) d);
                                            nuevo.AddHijos(nuevo5);
                                            nuevo.AddHijos((nodo) f);
                                            nuevo.AddHijos(nuevo6);
       
                                            RESULT = nuevo;
                                            :}

            |pr_para EXPRE:a asignacion EXPRE:b pr_hasta EXPRE:c pr_con_incremental EXPRE:d pr_hacer  pr_fin_para {: 
                                            nodo nuevo = new nodo("PARA", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("para", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("asignacion", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("hasta", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo4 = new nodo("con_incremental", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo5 = new nodo("hacer", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo6 = new nodo("fin_para", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);
                                            nuevo.AddHijos((nodo) c);
                                            nuevo.AddHijos(nuevo4);
                                            nuevo.AddHijos((nodo) d);
                                            nuevo.AddHijos(nuevo5);
                                            nuevo.AddHijos(nuevo6);
       
                                            RESULT = nuevo;
                                            :}

;

MIENTRAS ::= pr_mientras EXPRE:a pr_hacer INSTRUCCIONES:b pr_fin_mientras {: 
                                            nodo nuevo = new nodo("MIENTRAS", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("mientras", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("hacer", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("fin_mientras", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);
                                            nuevo.AddHijos(nuevo3);

                                            RESULT = nuevo;
                                            :}

            |pr_mientras EXPRE:a pr_hacer pr_fin_mientras {: 
                                            nodo nuevo = new nodo("MIENTRAS", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("mientras", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("hacer", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo3 = new nodo("fin_mientras", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos(nuevo3);

                                            RESULT = nuevo;
                                            :}
;

REPETIR ::=  pr_repetir INSTRUCCIONES:a pr_hasta_que EXPRE:b {: 
                                            nodo nuevo = new nodo("REPETIR", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("repetir", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("hasta_que", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos((nodo) a);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) b);

                                            RESULT = nuevo;
                                            :}

            |pr_repetir pr_hasta_que EXPRE:a {: 
                                            nodo nuevo = new nodo("REPETIR", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo1 = new nodo("repetir", parser.contador);
                                            parser.contador ++;
                                            nodo nuevo2 = new nodo("hasta_que", parser.contador);
                                            parser.contador ++;

                                            nuevo.AddHijos(nuevo1);
                                            nuevo.AddHijos(nuevo2);
                                            nuevo.AddHijos((nodo) a);

                                            RESULT = nuevo;
                                            :}
;