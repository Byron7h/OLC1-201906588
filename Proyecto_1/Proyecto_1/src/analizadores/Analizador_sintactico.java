
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\004\005\000\002\005" +
    "\004\000\002\005\003\000\002\034\003\000\002\034\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\004\000" +
    "\002\007\003\000\002\032\004\000\002\032\003\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\010\010\000\002\003\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\007\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\005\000\002\014\003\000\002" +
    "\015\006\000\002\015\004\000\002\015\005\000\002\016" +
    "\004\000\002\016\004\000\002\017\004\000\002\020\006" +
    "\000\002\020\005\000\002\021\006\000\002\021\010\000" +
    "\002\022\007\000\002\022\011\000\002\030\007\000\002" +
    "\030\011\000\002\030\010\000\002\030\012\000\002\023" +
    "\007\000\002\023\006\000\002\024\007\000\002\024\012" +
    "\000\002\025\010\000\002\025\007\000\002\033\013\000" +
    "\002\033\012\000\002\033\015\000\002\033\014\000\002" +
    "\026\007\000\002\026\006\000\002\027\006\000\002\027" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\004\070\004\001\002\000\034\003\037\025" +
    "\020\030\027\034\032\037\024\042\030\044\013\047\033" +
    "\052\007\054\043\055\026\056\022\101\031\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\004" +
    "\101\270\001\002\000\060\003\uffe5\021\uffe5\025\uffe5\030" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5\037\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\052" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\071\uffe5\073\uffe5\101\uffe5" +
    "\001\002\000\036\003\ufffc\025\ufffc\030\ufffc\034\ufffc\037" +
    "\ufffc\042\ufffc\044\ufffc\047\ufffc\052\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\071\ufffc\101\ufffc\001\002\000\004\017\267\001" +
    "\002\000\032\003\037\025\020\030\027\034\032\037\024" +
    "\042\030\044\013\045\263\054\043\055\026\056\022\101" +
    "\031\001\002\000\004\017\261\001\002\000\036\003\037" +
    "\025\020\030\027\034\032\037\024\042\030\044\013\047" +
    "\033\052\007\054\043\055\026\056\022\071\257\101\031" +
    "\001\002\000\004\017\256\001\002\000\006\016\254\020" +
    "\246\001\002\000\004\101\031\001\002\000\060\003\uffe4" +
    "\021\uffe4\025\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\036" +
    "\uffe4\037\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\047\uffe4\050\uffe4\052\uffe4\054\uffe4\055\uffe4\056\uffe4\071" +
    "\uffe4\073\uffe4\101\uffe4\001\002\000\022\012\103\023\055" +
    "\024\051\061\056\100\052\101\047\102\050\103\054\001" +
    "\002\000\036\003\ufffe\025\ufffe\030\ufffe\034\ufffe\037\ufffe" +
    "\042\ufffe\044\ufffe\047\ufffe\052\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\071\ufffe\101\ufffe\001\002\000\022\012\103\023\055" +
    "\024\051\061\056\100\052\101\047\102\050\103\054\001" +
    "\002\000\036\003\ufffb\025\ufffb\030\ufffb\034\ufffb\037\ufffb" +
    "\042\ufffb\044\ufffb\047\ufffb\052\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\071\ufffb\101\ufffb\001\002\000\022\012\103\023\055" +
    "\024\051\061\056\100\052\101\047\102\050\103\054\001" +
    "\002\000\022\012\103\023\055\024\051\061\056\100\052" +
    "\101\047\102\050\103\054\001\002\000\022\012\103\023" +
    "\055\024\051\061\056\100\052\101\047\102\050\103\054" +
    "\001\002\000\010\016\uffc2\020\uffc2\026\uffc2\001\002\000" +
    "\022\012\103\023\055\024\051\061\056\100\052\101\047" +
    "\102\050\103\054\001\002\000\004\101\140\001\002\000" +
    "\060\003\uffe6\021\uffe6\025\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\047\uffe6\050\uffe6\052\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\071\uffe6\073\uffe6\101\uffe6\001\002\000\060\003" +
    "\uffe2\021\uffe2\025\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\036\uffe2\037\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\047\uffe2\050\uffe2\052\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\071\uffe2\073\uffe2\101\uffe2\001\002\000\004\017\137\001" +
    "\002\000\060\003\uffe1\021\uffe1\025\uffe1\030\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1\052\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\071\uffe1\073\uffe1\101\uffe1\001\002\000" +
    "\036\003\ufffd\025\ufffd\030\ufffd\034\ufffd\037\ufffd\042\ufffd" +
    "\044\ufffd\047\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\071" +
    "\ufffd\101\ufffd\001\002\000\060\003\uffe3\021\uffe3\025\uffe3" +
    "\030\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\037\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3" +
    "\052\uffe3\054\uffe3\055\uffe3\056\uffe3\071\uffe3\073\uffe3\101" +
    "\uffe3\001\002\000\036\003\ufffa\025\ufffa\030\ufffa\034\ufffa" +
    "\037\ufffa\042\ufffa\044\ufffa\047\ufffa\052\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\071\ufffa\101\ufffa\001\002\000\004\101\044" +
    "\001\002\000\022\012\053\023\055\024\051\061\056\100" +
    "\052\101\047\102\050\103\054\001\002\000\006\017\uffba" +
    "\020\133\001\002\000\152\003\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\013\uffce\015\uffce\016\uffce" +
    "\017\uffce\021\uffce\022\uffce\025\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066" +
    "\uffce\067\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce" +
    "\076\uffce\077\uffce\101\uffce\001\002\000\152\003\uffcc\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\025\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\067\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\101\uffcc\001\002\000" +
    "\152\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022" +
    "\uffcb\025\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\071\uffcb" +
    "\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\101" +
    "\uffcb\001\002\000\152\003\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\013\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\021\uffc9\022\uffc9\025\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\101\uffc9\001\002\000\152\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\025\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\071\uffcd\072\uffcd\073\uffcd\074" +
    "\uffcd\075\uffcd\076\uffcd\077\uffcd\101\uffcd\001\002\000\024" +
    "\012\131\013\130\023\055\024\051\061\056\100\052\101" +
    "\047\102\050\103\054\001\002\000\152\003\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\025\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\067\uffc8\071\uffc8\072\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\076\uffc8\077\uffc8\101\uffc8\001\002\000\152" +
    "\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\013\uffca\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca" +
    "\025\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\062\uffca" +
    "\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\101\uffca" +
    "\001\002\000\022\012\103\023\055\024\051\061\056\100" +
    "\052\101\047\102\050\103\054\001\002\000\046\004\077" +
    "\005\070\006\064\007\073\010\065\011\100\057\102\060" +
    "\063\062\061\063\074\064\101\065\060\066\072\067\076" +
    "\074\062\075\066\076\067\077\075\001\002\000\022\012" +
    "\103\023\055\024\051\061\056\100\052\101\047\102\050" +
    "\103\054\001\002\000\022\012\103\023\055\024\051\061" +
    "\056\100\052\101\047\102\050\103\054\001\002\000\044" +
    "\003\uffc7\013\uffc7\017\uffc7\020\uffc7\025\uffc7\027\uffc7\030" +
    "\uffc7\034\uffc7\037\uffc7\042\uffc7\044\uffc7\046\uffc7\051\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\101\uffc7\001\002\000\022\012" +
    "\103\023\055\024\051\061\056\100\052\101\047\102\050" +
    "\103\054\001\002\000\022\012\103\023\055\024\051\061" +
    "\056\100\052\101\047\102\050\103\054\001\002\000\004" +
    "\014\117\001\002\000\044\003\uffc6\013\uffc6\017\uffc6\020" +
    "\uffc6\025\uffc6\027\uffc6\030\uffc6\034\uffc6\037\uffc6\042\uffc6" +
    "\044\uffc6\046\uffc6\051\uffc6\054\uffc6\055\uffc6\056\uffc6\101" +
    "\uffc6\001\002\000\044\003\uffc5\013\uffc5\017\uffc5\020\uffc5" +
    "\025\uffc5\027\uffc5\030\uffc5\034\uffc5\037\uffc5\042\uffc5\044" +
    "\uffc5\046\uffc5\051\uffc5\054\uffc5\055\uffc5\056\uffc5\101\uffc5" +
    "\001\002\000\022\012\103\023\055\024\051\061\056\100" +
    "\052\101\047\102\050\103\054\001\002\000\040\003\uffc0" +
    "\013\uffc0\017\uffc0\020\uffc0\025\uffc0\030\uffc0\034\uffc0\037" +
    "\uffc0\042\uffc0\044\uffc0\046\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\101\uffc0\001\002\000\022\012\103\023\055\024\051\061" +
    "\056\100\052\101\047\102\050\103\054\001\002\000\022" +
    "\012\103\023\055\024\051\061\056\100\052\101\047\102" +
    "\050\103\054\001\002\000\022\012\103\023\055\024\051" +
    "\061\056\100\052\101\047\102\050\103\054\001\002\000" +
    "\044\003\uffc4\013\uffc4\017\uffc4\020\uffc4\025\uffc4\027\uffc4" +
    "\030\uffc4\034\uffc4\037\uffc4\042\uffc4\044\uffc4\046\uffc4\051" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\101\uffc4\001\002\000\022" +
    "\012\103\023\055\024\051\061\056\100\052\101\047\102" +
    "\050\103\054\001\002\000\022\012\103\023\055\024\051" +
    "\061\056\100\052\101\047\102\050\103\054\001\002\000" +
    "\022\012\103\023\055\024\051\061\056\100\052\101\047" +
    "\102\050\103\054\001\002\000\022\012\103\023\055\024" +
    "\051\061\056\100\052\101\047\102\050\103\054\001\002" +
    "\000\022\012\103\023\055\024\051\061\056\100\052\101" +
    "\047\102\050\103\054\001\002\000\022\012\103\023\055" +
    "\024\051\061\056\100\052\101\047\102\050\103\054\001" +
    "\002\000\152\003\uffd7\004\077\005\070\006\064\007\073" +
    "\010\065\011\100\013\uffd7\015\uffd7\016\uffd7\017\uffd7\021" +
    "\uffd7\022\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\063\062\061\063\074\064\101\065\060\066\072\067\076" +
    "\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\101\uffd7\001\002\000\040\004\077\005\070\006\064" +
    "\007\073\010\065\011\100\013\106\057\102\060\063\062" +
    "\061\063\074\064\101\065\060\066\072\067\076\001\002" +
    "\000\152\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\013\uffde\015\uffde\016\uffde\017\uffde\021\uffde" +
    "\022\uffde\025\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\071" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde" +
    "\101\uffde\001\002\000\152\003\uffd2\004\077\005\070\006" +
    "\064\007\073\010\065\011\100\013\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\021\uffd2\022\uffd2\025\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\101\uffd2\001\002\000\152\003\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\065\011\uffd8\013\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\025\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\065\uffd8\066\uffd8\067\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\101\uffd8\001\002\000" +
    "\152\003\uffdd\004\uffdd\005\uffdd\006\064\007\073\010\065" +
    "\011\100\013\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022" +
    "\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\101" +
    "\uffdd\001\002\000\152\003\uffcf\004\077\005\070\006\064" +
    "\007\073\010\065\011\100\013\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\021\uffcf\022\uffcf\025\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\067\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\101\uffcf\001\002\000\152\003\uffd3\004\077" +
    "\005\070\006\064\007\073\010\065\011\100\013\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\025\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3\001\002\000\152" +
    "\003\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\065\011" +
    "\uffda\013\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda" +
    "\025\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\062\uffda" +
    "\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\071\uffda\072" +
    "\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\101\uffda" +
    "\001\002\000\152\003\uffd0\004\077\005\070\006\064\007" +
    "\073\010\065\011\100\013\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\025\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\101\uffd0\001\002\000\152\003\uffdc\004\uffdc\005" +
    "\uffdc\006\064\007\073\010\065\011\100\013\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\021\uffdc\022\uffdc\025\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\076\uffdc\077\uffdc\101\uffdc\001\002\000\022\012" +
    "\103\023\055\024\051\061\056\100\052\101\047\102\050" +
    "\103\054\001\002\000\040\004\077\005\070\006\064\007" +
    "\073\010\065\011\100\015\121\057\102\060\063\062\061" +
    "\063\074\064\101\065\060\066\072\067\076\001\002\000" +
    "\152\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022" +
    "\uffd9\025\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\062" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\101" +
    "\uffd9\001\002\000\152\003\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\065\011\uffdb\013\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\021\uffdb\022\uffdb\025\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\101\uffdb\001\002\000\152\003\uffd6\004\077" +
    "\005\070\006\064\007\073\010\065\011\100\013\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\025\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\062\061\063\074\064\101" +
    "\065\060\066\072\067\076\071\uffd6\072\uffd6\073\uffd6\074" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\101\uffd6\001\002\000\152" +
    "\003\uffd4\004\077\005\070\006\064\007\073\010\065\011" +
    "\100\013\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\025\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\071\uffd4\072" +
    "\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4" +
    "\001\002\000\152\003\uffd1\004\077\005\070\006\064\007" +
    "\073\010\065\011\100\013\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\021\uffd1\022\uffd1\025\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1" +
    "\077\uffd1\101\uffd1\001\002\000\152\003\uffd5\004\077\005" +
    "\070\006\064\007\073\010\065\011\100\013\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\021\uffd5\022\uffd5\025\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\062\061\063\074\064\101\065" +
    "\060\066\072\067\076\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\101\uffd5\001\002\000\006\013" +
    "\134\020\133\001\002\000\004\017\uffbb\001\002\000\022" +
    "\012\131\023\055\024\051\061\056\100\052\101\047\102" +
    "\050\103\054\001\002\000\050\004\077\005\070\006\064" +
    "\007\073\010\065\011\100\013\106\057\102\060\063\062" +
    "\061\063\074\064\101\065\060\066\072\067\076\074\062" +
    "\075\066\076\067\077\075\001\002\000\022\012\103\023" +
    "\055\024\051\061\056\100\052\101\047\102\050\103\054" +
    "\001\002\000\040\003\uffbf\013\uffbf\017\uffbf\020\uffbf\025" +
    "\uffbf\030\uffbf\034\uffbf\037\uffbf\042\uffbf\044\uffbf\046\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\101\uffbf\001\002\000\046\004" +
    "\077\005\070\006\064\007\073\010\065\011\100\057\102" +
    "\060\063\062\061\063\074\064\101\065\060\066\072\067" +
    "\076\074\062\075\066\076\067\077\075\001\002\000\040" +
    "\003\uffc1\013\uffc1\017\uffc1\020\uffc1\025\uffc1\030\uffc1\034" +
    "\uffc1\037\uffc1\042\uffc1\044\uffc1\046\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\101\uffc1\001\002\000\060\003\uffe8\021\uffe8\025" +
    "\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\037\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\047\uffe8\050" +
    "\uffe8\052\uffe8\054\uffe8\055\uffe8\056\uffe8\071\uffe8\073\uffe8" +
    "\101\uffe8\001\002\000\032\003\037\025\020\030\027\034" +
    "\032\037\024\042\030\044\013\051\142\054\043\055\026" +
    "\056\022\101\031\001\002\000\052\003\ufff8\021\ufff8\025" +
    "\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\050\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\073\ufff8\101\ufff8\001\002\000\022" +
    "\012\131\023\055\024\051\061\056\100\052\101\047\102" +
    "\050\103\054\001\002\000\032\003\037\025\020\030\027" +
    "\034\032\037\024\042\030\044\013\050\145\054\043\055" +
    "\026\056\022\101\031\001\002\000\052\003\ufff9\021\ufff9" +
    "\025\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\050\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\073\ufff9\101\ufff9\001\002\000" +
    "\036\003\uffb9\025\uffb9\030\uffb9\034\uffb9\037\uffb9\042\uffb9" +
    "\044\uffb9\047\uffb9\052\uffb9\054\uffb9\055\uffb9\056\uffb9\071" +
    "\uffb9\101\uffb9\001\002\000\032\003\037\020\133\025\020" +
    "\030\027\034\032\037\024\042\030\044\013\054\043\055" +
    "\026\056\022\101\031\001\002\000\032\003\037\025\020" +
    "\030\027\034\032\037\024\042\030\044\013\050\150\054" +
    "\043\055\026\056\022\101\031\001\002\000\036\003\uffb8" +
    "\025\uffb8\030\uffb8\034\uffb8\037\uffb8\042\uffb8\044\uffb8\047" +
    "\uffb8\052\uffb8\054\uffb8\055\uffb8\056\uffb8\071\uffb8\101\uffb8" +
    "\001\002\000\040\004\077\005\070\006\064\007\073\010" +
    "\065\011\100\035\152\057\102\060\063\062\061\063\074" +
    "\064\101\065\060\066\072\067\076\001\002\000\004\021" +
    "\153\001\002\000\022\012\103\023\055\024\051\061\056" +
    "\100\052\101\047\102\050\103\054\001\002\000\010\021" +
    "\156\033\157\036\155\001\002\000\064\003\uffaf\021\uffaf" +
    "\025\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\071\uffaf\073\uffaf\101\uffaf\001\002\000\022\012\103" +
    "\023\055\024\051\061\056\100\052\101\047\102\050\103" +
    "\054\001\002\000\004\031\160\001\002\000\030\003\037" +
    "\025\020\030\027\034\032\037\024\042\030\044\013\054" +
    "\043\055\026\056\022\101\031\001\002\000\032\003\037" +
    "\025\020\030\027\034\032\036\162\037\024\042\030\044" +
    "\013\054\043\055\026\056\022\101\031\001\002\000\064" +
    "\003\uffae\021\uffae\025\uffae\030\uffae\032\uffae\033\uffae\034" +
    "\uffae\036\uffae\037\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\052\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\071\uffae\073\uffae\101\uffae\001\002" +
    "\000\040\004\077\005\070\006\064\007\073\010\065\011" +
    "\100\022\164\057\102\060\063\062\061\063\074\064\101" +
    "\065\060\066\072\067\076\001\002\000\004\031\165\001" +
    "\002\000\030\003\037\025\020\030\027\034\032\037\024" +
    "\042\030\044\013\054\043\055\026\056\022\101\031\001" +
    "\002\000\036\003\037\021\uffad\025\020\030\027\033\uffad" +
    "\034\032\036\uffad\037\024\042\030\044\013\054\043\055" +
    "\026\056\022\101\031\001\002\000\040\004\077\005\070" +
    "\006\064\007\073\010\065\011\100\022\170\057\102\060" +
    "\063\062\061\063\074\064\101\065\060\066\072\067\076" +
    "\001\002\000\004\031\171\001\002\000\030\003\037\025" +
    "\020\030\027\034\032\037\024\042\030\044\013\054\043" +
    "\055\026\056\022\101\031\001\002\000\036\003\037\021" +
    "\uffac\025\020\030\027\033\uffac\034\032\036\uffac\037\024" +
    "\042\030\044\013\054\043\055\026\056\022\101\031\001" +
    "\002\000\040\004\077\005\070\006\064\007\073\010\065" +
    "\011\100\035\174\057\102\060\063\062\061\063\074\064" +
    "\101\065\060\066\072\067\076\001\002\000\032\003\037" +
    "\025\020\030\027\034\032\037\024\042\030\043\176\044" +
    "\013\054\043\055\026\056\022\101\031\001\002\000\032" +
    "\003\037\025\020\030\027\034\032\037\024\042\030\043" +
    "\177\044\013\054\043\055\026\056\022\101\031\001\002" +
    "\000\064\003\uffa6\021\uffa6\025\uffa6\030\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\071\uffa6\073\uffa6\101\uffa6" +
    "\001\002\000\064\003\uffa7\021\uffa7\025\uffa7\030\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\036\uffa7\037\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\071\uffa7\073\uffa7" +
    "\101\uffa7\001\002\000\040\004\077\005\070\006\064\007" +
    "\073\010\065\011\100\031\201\057\102\060\063\062\061" +
    "\063\074\064\101\065\060\066\072\067\076\001\002\000" +
    "\030\003\037\025\020\030\027\034\032\037\024\042\030" +
    "\044\013\054\043\055\026\056\022\101\031\001\002\000" +
    "\036\003\037\025\020\030\027\032\205\033\203\034\032" +
    "\037\024\042\030\044\013\054\043\055\026\056\022\073" +
    "\206\101\031\001\002\000\030\003\037\025\020\030\027" +
    "\034\032\037\024\042\030\044\013\054\043\055\026\056" +
    "\022\101\031\001\002\000\010\032\212\033\213\073\214" +
    "\001\002\000\064\003\uffb5\021\uffb5\025\uffb5\030\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\071\uffb5\073\uffb5" +
    "\101\uffb5\001\002\000\022\012\103\023\055\024\051\061" +
    "\056\100\052\101\047\102\050\103\054\001\002\000\040" +
    "\004\077\005\070\006\064\007\073\010\065\011\100\031" +
    "\210\057\102\060\063\062\061\063\074\064\101\065\060" +
    "\066\072\067\076\001\002\000\030\003\037\025\020\030" +
    "\027\034\032\037\024\042\030\044\013\054\043\055\026" +
    "\056\022\101\031\001\002\000\036\003\037\025\020\030" +
    "\027\032\uffb0\033\uffb0\034\032\037\024\042\030\044\013" +
    "\054\043\055\026\056\022\073\uffb0\101\031\001\002\000" +
    "\064\003\uffb3\021\uffb3\025\uffb3\030\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\036\uffb3\037\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\071\uffb3\073\uffb3\101\uffb3\001" +
    "\002\000\030\003\037\025\020\030\027\034\032\037\024" +
    "\042\030\044\013\054\043\055\026\056\022\101\031\001" +
    "\002\000\022\012\103\023\055\024\051\061\056\100\052" +
    "\101\047\102\050\103\054\001\002\000\040\004\077\005" +
    "\070\006\064\007\073\010\065\011\100\031\216\057\102" +
    "\060\063\062\061\063\074\064\101\065\060\066\072\067" +
    "\076\001\002\000\030\003\037\025\020\030\027\034\032" +
    "\037\024\042\030\044\013\054\043\055\026\056\022\101" +
    "\031\001\002\000\036\003\037\025\020\030\027\032\uffb1" +
    "\033\uffb1\034\032\037\024\042\030\044\013\054\043\055" +
    "\026\056\022\073\uffb1\101\031\001\002\000\032\003\037" +
    "\025\020\030\027\032\221\034\032\037\024\042\030\044" +
    "\013\054\043\055\026\056\022\101\031\001\002\000\064" +
    "\003\uffb2\021\uffb2\025\uffb2\030\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\071\uffb2\073\uffb2\101\uffb2\001\002" +
    "\000\032\003\037\025\020\030\027\032\223\034\032\037" +
    "\024\042\030\044\013\054\043\055\026\056\022\101\031" +
    "\001\002\000\064\003\uffb4\021\uffb4\025\uffb4\030\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\036\uffb4\037\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\071\uffb4\073\uffb4" +
    "\101\uffb4\001\002\000\040\004\077\005\070\006\064\007" +
    "\073\010\065\011\100\017\uffbe\057\102\060\063\062\061" +
    "\063\074\064\101\065\060\066\072\067\076\001\002\000" +
    "\040\004\077\005\070\006\064\007\073\010\065\011\100" +
    "\016\226\057\102\060\063\062\061\063\074\064\101\065" +
    "\060\066\072\067\076\001\002\000\022\012\103\023\055" +
    "\024\051\061\056\100\052\101\047\102\050\103\054\001" +
    "\002\000\040\004\077\005\070\006\064\007\073\010\065" +
    "\011\100\040\230\057\102\060\063\062\061\063\074\064" +
    "\101\065\060\066\072\067\076\001\002\000\022\012\103" +
    "\023\055\024\051\061\056\100\052\101\047\102\050\103" +
    "\054\001\002\000\042\004\077\005\070\006\064\007\073" +
    "\010\065\011\100\035\233\057\102\060\063\062\061\063" +
    "\074\064\101\065\060\066\072\067\076\072\232\001\002" +
    "\000\022\012\103\023\055\024\051\061\056\100\052\101" +
    "\047\102\050\103\054\001\002\000\032\003\037\025\020" +
    "\030\027\034\032\037\024\041\235\042\030\044\013\054" +
    "\043\055\026\056\022\101\031\001\002\000\032\003\037" +
    "\025\020\030\027\034\032\037\024\041\236\042\030\044" +
    "\013\054\043\055\026\056\022\101\031\001\002\000\064" +
    "\003\uffaa\021\uffaa\025\uffaa\030\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\036\uffaa\037\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\071\uffaa\073\uffaa\101\uffaa\001\002" +
    "\000\064\003\uffab\021\uffab\025\uffab\030\uffab\032\uffab\033" +
    "\uffab\034\uffab\036\uffab\037\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\071\uffab\073\uffab\101\uffab" +
    "\001\002\000\040\004\077\005\070\006\064\007\073\010" +
    "\065\011\100\035\240\057\102\060\063\062\061\063\074" +
    "\064\101\065\060\066\072\067\076\001\002\000\032\003" +
    "\037\025\020\030\027\034\032\037\024\041\242\042\030" +
    "\044\013\054\043\055\026\056\022\101\031\001\002\000" +
    "\032\003\037\025\020\030\027\034\032\037\024\041\243" +
    "\042\030\044\013\054\043\055\026\056\022\101\031\001" +
    "\002\000\064\003\uffa8\021\uffa8\025\uffa8\030\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\036\uffa8\037\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\071\uffa8\073\uffa8\101" +
    "\uffa8\001\002\000\064\003\uffa9\021\uffa9\025\uffa9\030\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\071\uffa9\073" +
    "\uffa9\101\uffa9\001\002\000\040\004\077\005\070\006\064" +
    "\007\073\010\065\011\100\017\uffbd\057\102\060\063\062" +
    "\061\063\074\064\101\065\060\066\072\067\076\001\002" +
    "\000\006\020\246\026\247\001\002\000\004\101\253\001" +
    "\002\000\012\074\062\075\066\076\067\077\075\001\002" +
    "\000\004\027\251\001\002\000\022\012\103\023\055\024" +
    "\051\061\056\100\052\101\047\102\050\103\054\001\002" +
    "\000\040\004\077\005\070\006\064\007\073\010\065\011" +
    "\100\017\uffe0\057\102\060\063\062\061\063\074\064\101" +
    "\065\060\066\072\067\076\001\002\000\010\016\uffc3\020" +
    "\uffc3\026\uffc3\001\002\000\022\012\103\023\055\024\051" +
    "\061\056\100\052\101\047\102\050\103\054\001\002\000" +
    "\040\004\077\005\070\006\064\007\073\010\065\011\100" +
    "\017\uffdf\057\102\060\063\062\061\063\074\064\101\065" +
    "\060\066\072\067\076\001\002\000\060\003\uffe9\021\uffe9" +
    "\025\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\037" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\047\uffe9" +
    "\050\uffe9\052\uffe9\054\uffe9\055\uffe9\056\uffe9\071\uffe9\073" +
    "\uffe9\101\uffe9\001\002\000\004\002\000\001\002\000\036" +
    "\003\uffff\025\uffff\030\uffff\034\uffff\037\uffff\042\uffff\044" +
    "\uffff\047\uffff\052\uffff\054\uffff\055\uffff\056\uffff\071\uffff" +
    "\101\uffff\001\002\000\060\003\uffe7\021\uffe7\025\uffe7\030" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7\037\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\052" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\071\uffe7\073\uffe7\101\uffe7" +
    "\001\002\000\032\003\037\025\020\030\027\034\032\037" +
    "\024\042\030\044\013\045\265\054\043\055\026\056\022" +
    "\101\031\001\002\000\022\012\103\023\055\024\051\061" +
    "\056\100\052\101\047\102\050\103\054\001\002\000\120" +
    "\003\uffa4\004\077\005\070\006\064\007\073\010\065\011" +
    "\100\021\uffa4\025\uffa4\030\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\036\uffa4\037\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\052\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\102\060\063\062\061\063\074\064" +
    "\101\065\060\066\072\067\076\071\uffa4\073\uffa4\101\uffa4" +
    "\001\002\000\022\012\103\023\055\024\051\061\056\100" +
    "\052\101\047\102\050\103\054\001\002\000\120\003\uffa5" +
    "\004\077\005\070\006\064\007\073\010\065\011\100\021" +
    "\uffa5\025\uffa5\030\uffa5\032\uffa5\033\uffa5\034\uffa5\036\uffa5" +
    "\037\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\047\uffa5\050\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\102\060\063\062\061\063\074\064\101\065" +
    "\060\066\072\067\076\071\uffa5\073\uffa5\101\uffa5\001\002" +
    "\000\060\003\uffea\021\uffea\025\uffea\030\uffea\032\uffea\033" +
    "\uffea\034\uffea\036\uffea\037\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\047\uffea\050\uffea\052\uffea\054\uffea\055" +
    "\uffea\056\uffea\071\uffea\073\uffea\101\uffea\001\002\000\012" +
    "\074\062\075\066\076\067\077\075\001\002\000\034\003" +
    "\303\025\020\030\027\034\032\037\024\042\030\044\013" +
    "\046\310\051\275\054\043\055\026\056\022\101\031\001" +
    "\002\000\034\003\uffef\025\uffef\030\uffef\034\uffef\037\uffef" +
    "\042\uffef\044\uffef\046\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\101\uffef\001\002\000\004\017\323\001\002\000\034" +
    "\003\ufff6\025\ufff6\030\ufff6\034\ufff6\037\ufff6\042\ufff6\044" +
    "\ufff6\046\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\101\ufff6" +
    "\001\002\000\022\012\131\023\055\024\051\061\056\100" +
    "\052\101\047\102\050\103\054\001\002\000\004\017\317" +
    "\001\002\000\004\017\316\001\002\000\004\017\315\001" +
    "\002\000\034\003\uffee\025\uffee\030\uffee\034\uffee\037\uffee" +
    "\042\uffee\044\uffee\046\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\101\uffee\001\002\000\034\003\ufff0\025\ufff0\030\ufff0" +
    "\034\ufff0\037\ufff0\042\ufff0\044\ufff0\046\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\101\ufff0\001\002\000\034\003\uffeb" +
    "\025\uffeb\030\uffeb\034\uffeb\037\uffeb\042\uffeb\044\uffeb\046" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\101\uffeb\001\002" +
    "\000\034\003\uffec\025\uffec\030\uffec\034\uffec\037\uffec\042" +
    "\uffec\044\uffec\046\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\101\uffec\001\002\000\004\017\314\001\002\000\034\003" +
    "\303\025\020\030\027\034\032\037\024\042\030\044\013" +
    "\046\310\053\313\054\043\055\026\056\022\101\031\001" +
    "\002\000\034\003\uffed\025\uffed\030\uffed\034\uffed\037\uffed" +
    "\042\uffed\044\uffed\046\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\101\uffed\001\002\000\022\012\103\023\055\024\051" +
    "\061\056\100\052\101\047\102\050\103\054\001\002\000" +
    "\040\004\077\005\070\006\064\007\073\010\065\011\100" +
    "\017\uffbc\057\102\060\063\062\061\063\074\064\101\065" +
    "\060\066\072\067\076\001\002\000\034\003\ufff7\025\ufff7" +
    "\030\ufff7\034\ufff7\037\ufff7\042\ufff7\044\ufff7\046\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\101\ufff7\001\002\000\036" +
    "\003\uffb7\025\uffb7\030\uffb7\034\uffb7\037\uffb7\042\uffb7\044" +
    "\uffb7\047\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\071\uffb7" +
    "\101\uffb7\001\002\000\034\003\ufff3\025\ufff3\030\ufff3\034" +
    "\ufff3\037\ufff3\042\ufff3\044\ufff3\046\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\101\ufff3\001\002\000\034\003\ufff2\025" +
    "\ufff2\030\ufff2\034\ufff2\037\ufff2\042\ufff2\044\ufff2\046\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\101\ufff2\001\002\000" +
    "\034\003\ufff1\025\ufff1\030\ufff1\034\ufff1\037\ufff1\042\ufff1" +
    "\044\ufff1\046\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\101" +
    "\ufff1\001\002\000\034\003\ufff4\025\ufff4\030\ufff4\034\ufff4" +
    "\037\ufff4\042\ufff4\044\ufff4\046\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\101\ufff4\001\002\000\034\003\303\020\133" +
    "\025\020\030\027\034\032\037\024\042\030\044\013\046" +
    "\310\054\043\055\026\056\022\101\031\001\002\000\034" +
    "\003\303\025\020\030\027\034\032\037\024\042\030\044" +
    "\013\046\310\053\322\054\043\055\026\056\022\101\031" +
    "\001\002\000\036\003\uffb6\025\uffb6\030\uffb6\034\uffb6\037" +
    "\uffb6\042\uffb6\044\uffb6\047\uffb6\052\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\071\uffb6\101\uffb6\001\002\000\034\003\ufff5\025" +
    "\ufff5\030\ufff5\034\ufff5\037\ufff5\042\ufff5\044\ufff5\046\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\101\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\004\004\004\001\001\000\042\002\010\003" +
    "\011\005\014\006\037\010\015\014\016\016\035\020\013" +
    "\021\024\022\041\024\007\026\040\027\034\030\033\033" +
    "\020\034\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\140\003\011\007\261\010\015" +
    "\014\016\016\035\020\013\024\007\026\040\027\034\030" +
    "\033\033\020\001\001\000\002\001\001\000\040\002\010" +
    "\003\011\006\037\010\015\014\016\016\035\020\013\021" +
    "\024\022\041\024\007\026\040\027\034\030\033\033\020" +
    "\034\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\244\001\001\000\002\001\001\000\006\011\243" +
    "\012\045\001\001\000\002\001\001\000\006\011\224\012" +
    "\045\001\001\000\002\001\001\000\006\011\223\012\045" +
    "\001\001\000\006\011\177\012\045\001\001\000\006\011" +
    "\172\012\045\001\001\000\002\001\001\000\006\011\150" +
    "\012\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\056\012\045\015\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\131" +
    "\012\045\015\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\125\012\045\001\001\000\004\013\070" +
    "\001\001\000\006\011\124\012\045\001\001\000\006\011" +
    "\123\012\045\001\001\000\002\001\001\000\006\011\122" +
    "\012\045\001\001\000\006\011\121\012\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\115\012\045\001\001\000\002\001\001\000\006\011" +
    "\114\012\045\001\001\000\006\011\113\012\045\001\001" +
    "\000\006\011\112\012\045\001\001\000\002\001\001\000" +
    "\006\011\111\012\045\001\001\000\006\011\110\012\045" +
    "\001\001\000\006\011\107\012\045\001\001\000\006\011" +
    "\106\012\045\001\001\000\006\011\103\012\045\001\001" +
    "\000\006\011\104\012\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\117\012\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\131\012\045\015\126" +
    "\001\001\000\004\013\070\001\001\000\006\011\134\012" +
    "\045\001\001\000\002\001\001\000\004\013\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\140\003" +
    "\011\007\142\010\015\014\016\016\035\020\013\024\007" +
    "\026\040\027\034\030\033\033\020\001\001\000\002\001" +
    "\001\000\010\011\056\012\045\015\145\001\001\000\030" +
    "\002\143\003\011\010\015\014\016\016\035\020\013\024" +
    "\007\026\040\027\034\030\033\033\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\140\003\011\007" +
    "\146\010\015\014\016\016\035\020\013\024\007\026\040" +
    "\027\034\030\033\033\020\001\001\000\030\002\143\003" +
    "\011\010\015\014\016\016\035\020\013\024\007\026\040" +
    "\027\034\030\033\033\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\153\001\001\000\006\011\166" +
    "\012\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\162\012\045\001\001\000\002\001\001\000\032" +
    "\002\140\003\011\007\160\010\015\014\016\016\035\020" +
    "\013\024\007\026\040\027\034\030\033\033\020\001\001" +
    "\000\030\002\143\003\011\010\015\014\016\016\035\020" +
    "\013\024\007\026\040\027\034\030\033\033\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\140\003\011\007\165\010\015\014\016\016\035" +
    "\020\013\024\007\026\040\027\034\030\033\033\020\001" +
    "\001\000\030\002\143\003\011\010\015\014\016\016\035" +
    "\020\013\024\007\026\040\027\034\030\033\033\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\140" +
    "\003\011\007\171\010\015\014\016\016\035\020\013\024" +
    "\007\026\040\027\034\030\033\033\020\001\001\000\030" +
    "\002\143\003\011\010\015\014\016\016\035\020\013\024" +
    "\007\026\040\027\034\030\033\033\020\001\001\000\002" +
    "\001\001\000\032\002\140\003\011\007\174\010\015\014" +
    "\016\016\035\020\013\024\007\026\040\027\034\030\033" +
    "\033\020\001\001\000\030\002\143\003\011\010\015\014" +
    "\016\016\035\020\013\024\007\026\040\027\034\030\033" +
    "\033\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\140\003\011\007\201\010\015" +
    "\014\016\016\035\020\013\024\007\026\040\027\034\030" +
    "\033\033\020\001\001\000\032\002\143\003\011\010\015" +
    "\014\016\016\035\020\013\023\203\024\007\026\040\027" +
    "\034\030\033\033\020\001\001\000\032\002\140\003\011" +
    "\007\221\010\015\014\016\016\035\020\013\024\007\026" +
    "\040\027\034\030\033\033\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\206\012\045\001\001\000" +
    "\002\001\001\000\032\002\140\003\011\007\210\010\015" +
    "\014\016\016\035\020\013\024\007\026\040\027\034\030" +
    "\033\033\020\001\001\000\030\002\143\003\011\010\015" +
    "\014\016\016\035\020\013\024\007\026\040\027\034\030" +
    "\033\033\020\001\001\000\002\001\001\000\032\002\140" +
    "\003\011\007\217\010\015\014\016\016\035\020\013\024" +
    "\007\026\040\027\034\030\033\033\020\001\001\000\006" +
    "\011\214\012\045\001\001\000\002\001\001\000\032\002" +
    "\140\003\011\007\216\010\015\014\016\016\035\020\013" +
    "\024\007\026\040\027\034\030\033\033\020\001\001\000" +
    "\030\002\143\003\011\010\015\014\016\016\035\020\013" +
    "\024\007\026\040\027\034\030\033\033\020\001\001\000" +
    "\030\002\143\003\011\010\015\014\016\016\035\020\013" +
    "\024\007\026\040\027\034\030\033\033\020\001\001\000" +
    "\002\001\001\000\030\002\143\003\011\010\015\014\016" +
    "\016\035\020\013\024\007\026\040\027\034\030\033\033" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\226\012\045\001\001\000\002\001" +
    "\001\000\006\011\230\012\045\001\001\000\002\001\001" +
    "\000\006\011\236\012\045\001\001\000\032\002\140\003" +
    "\011\007\233\010\015\014\016\016\035\020\013\024\007" +
    "\026\040\027\034\030\033\033\020\001\001\000\030\002" +
    "\143\003\011\010\015\014\016\016\035\020\013\024\007" +
    "\026\040\027\034\030\033\033\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\140" +
    "\003\011\007\240\010\015\014\016\016\035\020\013\024" +
    "\007\026\040\027\034\030\033\033\020\001\001\000\030" +
    "\002\143\003\011\010\015\014\016\016\035\020\013\024" +
    "\007\026\040\027\034\030\033\033\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\247\001\001\000\002" +
    "\001\001\000\006\011\251\012\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\254\012\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\143\003\011" +
    "\010\015\014\016\016\035\020\013\024\007\026\040\027" +
    "\034\030\033\033\020\001\001\000\006\011\263\012\045" +
    "\001\001\000\002\001\001\000\006\011\265\012\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\270" +
    "\001\001\000\034\003\272\010\275\014\016\016\304\017" +
    "\277\020\276\024\271\026\306\027\303\030\301\031\273" +
    "\032\305\033\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\056\012\045\015\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\272\010" +
    "\275\014\016\016\304\017\277\020\276\024\271\026\306" +
    "\027\303\030\301\031\311\033\300\001\001\000\002\001" +
    "\001\000\006\011\310\012\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\272\010\275\014\016\016\304\017\277\020\276\024" +
    "\271\026\306\027\303\030\301\031\273\032\320\033\300" +
    "\001\001\000\032\003\272\010\275\014\016\016\304\017" +
    "\277\020\276\024\271\026\306\027\303\030\301\031\311" +
    "\033\300\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static String cache = "";
    String lista_iid = "";

    
    // listas que nos van a servir
    public static LinkedList<TError> errores = new LinkedList<TError>();
    

    // esta función nata de la herramienta, manda a llamar todos los errores sintacticos
    // necesita un objeto simbolo
   
    public void syntax_error(Symbol s)
    {        

        //obtenemos los valores de los parámetros del objeto s
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
      
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        // error de tipo sintáctico
        //TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        //errores.add(tmp);
        
    }


    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores, se reporta y termina el análisis
    // en caso de que se pueda recurer este no saldrá
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        //TError tmp = new TError("Sintactico",lexema, "Caracter no esperado",fila,columna);
        //errores.add(tmp);   
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pr_inicio GLOBALES pr_fin 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                                                cache = a + c;
                                              
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GLOBALES ::= GLOBALES GLO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("GLOBALES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GLOBALES ::= GLO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("GLOBALES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GLO ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("GLO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLO ::= INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		cache = cache  + a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("GLO",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBAL ::= METODO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GLOBAL ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES_R ::= INSTRUCCIONES_R INSTRUCCION_R 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_R",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES_R ::= INSTRUCCION_R 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES_R",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION_R ::= ASIGNACION_ pyc 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION_R ::= DECLARACION pyc 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION_R ::= PRINT pyc 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION_R ::= RETORNO pyc 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION_R ::= EJECUCION pyc 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION_R ::= SI 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION_R ::= SEGUN 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION_R ::= PARA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION_R ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION_R ::= REPETIR 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION_R ::= error 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_R",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= ASIGNACION_ pyc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  RESULT = a ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= DECLARACION pyc 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= PRINT pyc 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= EJECUCION pyc 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= SI 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= SEGUN 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= PARA 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= MIENTRAS 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= REPETIR 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= error 
            {
              String RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= pr_ingresar LISTA_ID pr_como TIPO pr_con_valor EXPRE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION_ ::= LISTA_ID asignacion EXPRE 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT = lista_iid + " = " + w ;  
                                                lista_iid = ""; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRE ::= pare1 EXPRE pare2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  RESULT=" ( " + a + " ) ";  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRE ::= EXPRE suma EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " + " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRE ::= EXPRE resta EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " - " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRE ::= EXPRE mult EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " * " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRE ::= EXPRE div EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " / " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRE ::= EXPRE pot cor1 EXPRE cor2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  RESULT=a + " ** " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRE ::= EXPRE mod EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " % " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRE ::= EXPRE pr_or EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " or " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRE ::= EXPRE pr_and EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " and " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRE ::= pr_not EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT="not " + a;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRE ::= EXPRE pr_mayor EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " > " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRE ::= EXPRE pr_menor EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " < " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRE ::= EXPRE pr_mayor_o_igual EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " >= " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRE ::= EXPRE pr_menor_o_igual EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " <= " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRE ::= EXPRE pr_es_igual EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " == " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRE ::= EXPRE pr_es_diferente EXPRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a + " != " + b;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRE ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRE",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR ::= num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALOR ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALOR ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALOR ::= pr_verdadero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT="true";  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALOR ::= pr_falso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT="false";  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=a;  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= td_cadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= td_numero 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= td_boolean 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= td_caracter 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_ID ::= LISTA_ID coma id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 lista_iid +=  a + " "+ b + lista_iid ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTA_ID ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 lista_iid +=  a + lista_iid ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ID",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma EXPRE TIPO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_PARAMETROS ::= EXPRE TIPO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTA_PARAMETROS ::= pare1 LISTA_PARAMETROS pare2 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRINT ::= pr_imprimir EXPRE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRINT ::= pr_imprimir_nl EXPRE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRINT",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RETORNO ::= pr_retornar EXPRE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EJECUCION ::= pr_ejecutar id pare1 pare2 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EJECUCION ::= pr_ejecutar id LISTA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUCION",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METODO ::= pr_metodo id INSTRUCCIONES pr_fin_metodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // METODO ::= pr_metodo id pr_con_parametros LISTA_PARAMETROS INSTRUCCIONES pr_fin_metodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= pr_funcion id TIPO INSTRUCCIONES_R pr_fin_funcion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION ::= pr_funcion id TIPO pr_con_parametros LISTA_PARAMETROS INSTRUCCIONES_R pr_fin_funcion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SI ::= pr_si EXPRE pr_entonces INSTRUCCIONES pr_fin_si 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SI",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SI ::= pr_si EXPRE pr_entonces INSTRUCCIONES pr_de_lo_contrario INSTRUCCIONES pr_fin_si 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SI",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SI ::= pr_si EXPRE pr_entonces INSTRUCCIONES RAMIFICACION pr_fin_si 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SI",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SI ::= pr_si EXPRE pr_entonces INSTRUCCIONES RAMIFICACION pr_de_lo_contrario INSTRUCCIONES pr_fin_si 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SI",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RAMIFICACION ::= RAMIFICACION pr_o_si EXPRE pr_entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RAMIFICACION",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RAMIFICACION ::= pr_o_si EXPRE pr_entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RAMIFICACION",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SEGUN ::= pr_segun EXPRE pr_hacer LISTA_SEGUN pr_fin_segun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SEGUN ::= pr_segun EXPRE pr_hacer LISTA_SEGUN pr_de_lo_contrario pr_entonces INSTRUCCIONES pr_fin_segun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_SEGUN ::= LISTA_SEGUN duda1 EXPRE duda2 pr_entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_SEGUN ::= duda1 EXPRE duda2 pr_entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_SEGUN",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARA ::= pr_para EXPRE asignacion EXPRE pr_hasta EXPRE pr_hacer INSTRUCCIONES pr_fin_para 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARA ::= pr_para EXPRE asignacion EXPRE pr_hasta EXPRE pr_hacer pr_fin_para 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARA ::= pr_para EXPRE asignacion EXPRE pr_hasta EXPRE pr_con_incremental EXPRE pr_hacer INSTRUCCIONES pr_fin_para 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARA ::= pr_para EXPRE asignacion EXPRE pr_hasta EXPRE pr_con_incremental EXPRE pr_hacer pr_fin_para 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MIENTRAS ::= pr_mientras EXPRE pr_hacer INSTRUCCIONES pr_fin_mientras 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MIENTRAS ::= pr_mientras EXPRE pr_hacer pr_fin_mientras 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // REPETIR ::= pr_repetir INSTRUCCIONES pr_hasta_que EXPRE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // REPETIR ::= pr_repetir pr_hasta_que EXPRE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
